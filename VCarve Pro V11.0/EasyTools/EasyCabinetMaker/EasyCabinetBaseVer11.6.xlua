function Base_CabinetBack()
  local pt1Text = Cab.Wpt7
  BOM.PID = BOM.PID + 10
  local pt2 = Polar2D(Cab.Wpt7,  0, BaseDim.BackPanelWidth)
  local ptC = Polar2D(Cab.Wpt7, 90, (BaseDim.BackPanelLength * 0.5))
  local pt3 = Polar2D(pt2,      90,  BaseDim.BackPanelLength )
  local pt4 = Polar2D(pt3,     180, BaseDim.BackPanelWidth)
  local ptW = Cab.Wpt9
  local ptX = Cab.Wpt9
  local ptY = Cab.Wpt9
  local ptZ = Cab.Wpt9
        ptW = Polar2D(ptC, 270, (BaseDim.MaterialThickness + Milling.DadoClearance)  * 0.5)
        ptW = Polar2D(ptW, 180, Milling.PocketToolRadius)
        ptX = Polar2D(ptW,  90, BaseDim.MaterialThickness + Milling.DadoClearance)
        ptY = Polar2D(ptX,   0, BaseDim.BackPanelWidth     - (BaseDim.ToeKickCoverHeight + BaseDim.ToeKickBottomOffsetHeight ))
        ptZ = Polar2D(ptW,   0, BaseDim.BackPanelWidth     - (BaseDim.ToeKickCoverHeight + BaseDim.ToeKickBottomOffsetHeight ))
  local ptF = Polar2D(pt2, 180, BaseDim.ToeKickCoverHeight + BaseDim.ToeKickBottomOffsetHeight - (Milling.DadoClearance * 0.5))
        ptF = Polar2D(ptF, 270, Milling.PocketToolRadius)
  local ptG = Polar2D(ptF, 180, BaseDim.MaterialThickness + Milling.DadoClearance)
  local ptE = Polar2D(ptG,  90, BaseDim.BackPanelLength + Milling.PocketToolDia)
  local ptH = Polar2D(ptF,  90, BaseDim.BackPanelLength + Milling.PocketToolDia)

  local ptGZ = Polar2D(Polar2D(ptG,  90, Milling.PocketToolRadius),  90, ((BaseDim.BackPanelLength - BaseDim.MaterialThickness) * 0.5) - (Milling.DadoClearance * 0.5))
  local ptGY = Polar2D(Polar2D(ptE, 270, Milling.PocketToolRadius), 270, ((BaseDim.BackPanelLength - BaseDim.MaterialThickness) * 0.5) - (Milling.DadoClearance * 0.5))

--  Center Dado
  if BaseQuestion.AddCenterPanel then
    if BaseQuestion.DrawBackPanel then
      local layer = Milling.job.LayerManager:GetLayerWithName(Milling.LNBackPocket .. "-Base")
      local line = Contour(0.0)
      line:AppendPoint(ptG)  -- Draw Left Profile
      line:LineTo(ptGZ)  ;    line:LineTo(ptW)
      line:LineTo(ptX)   ;    line:LineTo(ptGY)
      line:LineTo(ptE)   ;    line:LineTo(ptH)
      line:LineTo(ptF)   ;    line:LineTo(ptG)
      layer:AddObject(CreateCadContour(line), true)
      pt1Text = Polar2D(ptW, 340,  1.75 )
      if Milling.AddJointNotes then
        DrawWriter("Dado - ".. WallDim.MaterialThickness .. " X " ..  Milling.DadoHeight , pt1Text, 0.35, Milling.LNPartLabels,  0.0)
      end
    end
  else   --  Bottom Dado
    if BaseQuestion.DrawBackPanel then
      DrawBox(ptF, ptG, ptE, ptH, Milling.LNBackPocket .. "-Base")
      pt1Text = Polar2D(ptG, 60,  2.75 )
      if Milling.AddJointNotes then
        DrawWriter("Dado - ".. WallDim.MaterialThickness .. " X " ..  Milling.DadoHeight , pt1Text, 0.35, Milling.LNPartLabels,  90.0)
      end
    end
  end
--  Panel Profile
  if BaseQuestion.DrawBackPanel then
    DrawBox(Cab.Wpt7, pt2, pt3, pt4, Milling.LNBackProfile .. "-Base")
    pt1Text = Polar2D(Cab.Wpt7, 45,  1.5)
    DrawWriter("(ID: ".. BOM.PID ..") Base Cabinet Back - ".. BaseDim.ThicknessBack .." " .. BOM.BaseCabinetMateralType .. "  (" .. BaseDim.BackPanelLength .. " x " .. BaseDim.BackPanelWidth ..")", pt1Text, 0.35, Milling.LNPartLabels, 0.0)
  end
  CutListfileWriterItem(BOM.PID, "Cabinet Back", "Base", "1", BaseDim.ThicknessBack, BOM.BaseCabinetMateralType, BaseDim.BackPanelLength, BaseDim.BackPanelWidth)
  --Cab.Wpt10 = Polar2D(pt2, 0,  Milling.PartGap)
  return true
end
-- =====================================================]]
function Base_CabinetSide(side)
  local ptA = Cab.Wpt1      ;  local ptB = Cab.Wpt1
  local ptL = Cab.Wpt1      ;  local ptG = Cab.Wpt1
  local ptH = Cab.Wpt1      ;  local ptI = Cab.Wpt1
  local ptJ = Cab.Wpt1      ;  local ptD = Cab.Wpt1
  local ptC = Cab.Wpt1      ;  local ptE = Cab.Wpt1
  local ptF = Cab.Wpt1      ;  local ptJA = Cab.Wpt1
  local ptJB = Cab.Wpt1     ;  local ptJC = Cab.Wpt1
  local ptK = Cab.Wpt1      ;  local ptL = Cab.Wpt1
  local ptM = Cab.Wpt1      ;  local ptN = Cab.Wpt1
  local ptNA = Cab.Wpt1     ;  local ptNB = Cab.Wpt1
  local ptNC = Cab.Wpt1     ;  local ptO = Cab.Wpt1
  local ptP = Cab.Wpt1      ;  local ptS = Cab.Wpt1
  local ptSA = Cab.Wpt1     ;  local ptSB = Cab.Wpt1
  local ptSC = Cab.Wpt1     ;  local ptT = Cab.Wpt1
  local ptR = Cab.Wpt1      ;  local ptQ = Cab.Wpt1
  local pt1Text = Cab.Wpt1  ;  local pt2 = Cab.Wpt1
  local pt3 = Cab.Wpt1      ;  local pt4 = Cab.Wpt1
  local pt5 = Cab.Wpt1      ;  local pt6 = Cab.Wpt1
  local pt7 = Cab.Wpt1      ;  local ptPA = Cab.Wpt1
  local ptOD = Cab.Wpt1     ;  local ptEC = Cab.Wpt1
  local ptFC = Cab.Wpt1     ;  local ptLD  = Cab.Wpt1
  local ptIA  = Cab.Wpt1    ;  local ptHA  = Cab.Wpt1
  local ptGA  = Cab.Wpt1    ;  local ptFSA = Cab.Wpt1
  local ptFSB = Cab.Wpt1    ;  local pText = ""
  local layer = Milling.job.LayerManager:GetLayerWithName(Milling.LNSideProfile .. "-Base")
  local line  = Contour(0.0)
  local  DrawerHeight = 0.0
  local AX = Cab.Wpt1
  local DrawerRowCountX = 1
  local ptx = Cab.Wpt1
  local anx = 0
  local rows = 1
  BOM.PID = BOM.PID + 10
  if side  ==  "R" then
    pt1Text = Polar2D(Cab.Wpt1, 45,  1.5)
    pt2 = Polar2D(Cab.Wpt1, 0, BaseDim.CabHeight)
    pt3 = Polar2D(pt2,  90, BaseDim.SidePanelWidth)
    pt4 = Polar2D(pt3, 180, BaseDim.CabHeight)
    pt5 = Polar2D(pt3, 270, BaseDim.ToeKickDepth - BaseDim.MaterialThickness)
    pt6 = Polar2D(pt5, 180, BaseDim.ToeKickCoverHeight)
    pt7 = Polar2D(pt3, 180, BaseDim.ToeKickCoverHeight)
    if BaseQuestion.DrawSidePanels then
      line:AppendPoint(Cab.Wpt1)  -- Draw Left Profile
      line:LineTo(pt2)  ;    line:LineTo(pt5)
      line:LineTo(pt6)  ;    line:LineTo(pt7)
      line:LineTo(pt4)  ;    line:LineTo(Cab.Wpt1)
      layer:AddObject(CreateCadContour(line), true)
    end
--  Back Dado
    ptA = Polar2D(Cab.Wpt1,  90, BaseDim.ThicknessBack)
    ptD = Polar2D(ptA,      180, Milling.PocketToolRadius)
    ptA = Polar2D(ptD,      270, BaseDim.ThicknessBack + Milling.RabbitClearance)
    ptC = Polar2D(pt2,       90, BaseDim.ThicknessBack)
    ptC = Polar2D(ptC,        0, Milling.PocketToolRadius)
    ptB = Polar2D(ptC,      270, BaseDim.ThicknessBack + Milling.RabbitClearance)
    pText = Polar2D(Polar2D(ptA, 4, 15.75), 0, 6.0)
    if Milling.AddJointNotes and BaseQuestion.DrawSidePanels then
      DrawWriter("Rabbit - ".. WallDim.ThicknessBack .. " X " ..  Milling.DadoHeight , pText, 0.35, Milling.LNPartLabels,  0.0)
    end -- if end
--  Bottom Dado
    ptF = Polar2D(pt2,   180, BaseDim.ToeKickCoverHeight + BaseDim.ToeKickBottomOffsetHeight - (Milling.DadoClearance * 0.5))
    ptF = Polar2D(ptF,   270, Milling.PocketToolRadius)
    ptG = Polar2D(pt3,   180, BaseDim.ToeKickCoverHeight + BaseDim.ToeKickBottomOffsetHeight - (Milling.DadoClearance * 0.5))
    ptG = Polar2D(ptG,    90, Milling.PocketToolRadius)

    ptE = Polar2D(ptF,   180, BaseDim.MaterialThickness + Milling.DadoClearance)
    ptH = Polar2D(ptG,   180, BaseDim.MaterialThickness + Milling.DadoClearance)
    pText = Polar2D(ptE, 100,  2.75 )
    if Milling.AddJointNotes and BaseQuestion.DrawSidePanels then
      DrawWriter("Dado - ".. WallDim.MaterialThickness .. " X " ..  Milling.DadoHeight , pText, 0.35, Milling.LNPartLabels,  90.0)
    end -- if end
--  Top Frame Back Dado
    layer = Milling.job.LayerManager:GetLayerWithName(Milling.LNSidePocket .. "-Base")
    ptO   = Polar2D(Cab.Wpt1, 90, BaseDim.ThicknessBack)
    ptO   = Polar2D(ptO,       0, BaseDim.MaterialThickness)
    ptN   = Polar2D(ptO,      90, BaseDim.TopFrameWidth)
    ptNA  = Polar2D(ptN,      90, Milling.PocketToolRadius)
    ptNB  = Polar2D(ptNA,    180, Milling.PocketToolDia + Milling.DadoClearance)
    ptNC  = Polar2D(ptNB,    270, Milling.PocketToolRadius)
    ptM   = Polar2D(ptN,     180, BaseDim.MaterialThickness + Milling.RabbitClearance)
    ptO   = Polar2D(ptO,     270, Milling.RabbitClearance + BaseDim.ThicknessBack + Milling.PocketToolRadius)
    ptP   = Polar2D(ptO,     180, BaseDim.MaterialThickness + Milling.RabbitClearance)

--  Top Frame Front Dado
    ptI  = Polar2D(pt4,    0.0, BaseDim.MaterialThickness)
    ptJ  = Polar2D(ptI,  270.0, BaseDim.TopFrameWidth)
    ptJA = Polar2D(ptJ,  270.0, Milling.PocketToolRadius)
    ptJB = Polar2D(ptJA, 180.0, Milling.PocketToolDia + Milling.DadoClearance)
    ptJC = Polar2D(ptJB,  90.0, Milling.PocketToolRadius)
    ptI  = Polar2D(ptI,   90.0, Milling.RabbitClearance)
    ptK  = Polar2D(ptJ,  180.0, BaseDim.MaterialThickness + Milling.RabbitClearance)
    ptL  = Polar2D(ptI,  180.0, BaseDim.MaterialThickness + Milling.RabbitClearance)
    if BaseQuestion.DrawSidePanels then
      line = Contour(0.0)
      line:AppendPoint(ptI)
      line:LineTo(ptJA)  ;    line:LineTo(ptJB)
      line:LineTo(ptJC)  ;    line:LineTo(ptK)
      line:LineTo(ptL)   ;    line:LineTo(ptI)
      layer:AddObject(CreateCadContour(line), true)
    end
--  Toe Front Dado
    ptR  = Polar2D(pt5, 270.0, BaseDim.MaterialThickness)
    ptS  = Polar2D(ptR, 180.0, BaseDim.ToeKickCoverHeight)
    ptSA = Polar2D(ptS, 180.0, Milling.PocketToolRadius + BaseDim.ToeKickBottomOffsetHeight)
    ptSB = Polar2D(ptSA, 90.0, BaseDim.MaterialThickness + Milling.DadoClearance)
    ptSC = Polar2D(ptS,  90.0, BaseDim.MaterialThickness + Milling.DadoClearance)
    ptR  = Polar2D(ptR,   0.0, Milling.RabbitClearance)
    ptQ  = Polar2D(ptR,  90.0, BaseDim.MaterialThickness + Milling.RabbitClearance)
    ptT  = Polar2D(ptS,  90.0, BaseDim.MaterialThickness + Milling.RabbitClearance)
    ptPA  = Polar2D(Polar2D(Cab.Wpt1, 270.0, Milling.RabbitClearance), 180.0, Milling.RabbitClearance)
    ptOD   = Polar2D(Polar2D(Cab.Wpt1, 90, BaseDim.ThicknessBack),       0, BaseDim.MaterialThickness)
    ptC = Polar2D(pt2,       90, BaseDim.ThicknessBack)
    ptC = Polar2D(ptC,        0, Milling.PocketToolRadius)
    ptFC = Polar2D(ptC,   180, BaseDim.ToeKickCoverHeight + BaseDim.ToeKickBottomOffsetHeight + Milling.PocketToolRadius - (Milling.DadoClearance * 0.5))
    ptEC = Polar2D(ptFC,   180, BaseDim.MaterialThickness + Milling.DadoClearance)
    ptFSA = Polar2D(ptS, 180.0, BaseDim.ToeKickBottomOffsetHeight - (0.5 * Milling.DadoClearance ))
    ptFSB = Polar2D(ptSC, 180.0, BaseDim.ToeKickBottomOffsetHeight - (0.5 * Milling.DadoClearance ))
    if BaseQuestion.DrawSidePanels then
      line = Contour(0.0)
      line:AppendPoint(ptPA)
      line:LineTo(ptM)   ;     line:LineTo(ptNC)
      line:LineTo(ptNB)  ;     line:LineTo(ptNA)
      line:LineTo(ptOD)  ;     line:LineTo(ptEC)
      line:LineTo(ptH)   ;     line:LineTo(ptG)
      line:LineTo(ptFSB) ;     line:LineTo(ptSC)
      line:LineTo(ptT)   ;     line:LineTo(ptQ)
      line:LineTo(ptR)   ;     line:LineTo(ptFSA)
      line:LineTo(ptFC)  ;     line:LineTo(ptC)
      line:LineTo(ptB)   ;     line:LineTo(ptPA)
      layer:AddObject(CreateCadContour(line), true)
    end

    if BaseQuestion.AddStrecherPocket and BaseQuestion.DrawSidePanels then
      if BaseQuestion.DrawerRowCount >= 1 then
        AX = pt4
        DrawerRowCountX = 1
        while DrawerRowCountX <= BaseQuestion.DrawerRowCount do
          if DrawerRowCountX == 3 then
            DrawerHeight = BaseDim.FaceFrameDrawerHeight3 + BaseDim.FaceFrameMidRailWidth + (BaseDim.FaceFrameMidRailWidth * 0.5)
          end -- if end
          if DrawerRowCountX ==2 then
            DrawerHeight = BaseDim.FaceFrameDrawerHeight2 + BaseDim.FaceFrameMidRailWidth + (BaseDim.FaceFrameMidRailWidth * 0.5)
          end -- if end
          if DrawerRowCountX == 1 then
            DrawerHeight = BaseDim.FaceFrameDrawerHeight1 + BaseDim.FaceFrameTopRailWidth + (BaseDim.FaceFrameMidRailWidth * 0.5)
          end -- if end
          AX = Polar2D(AX,  0.0, DrawerHeight)
          Base_StrecherPocket(AX, 270)
          DrawerRowCountX = DrawerRowCountX + 1
        end -- while end
      end -- if end
    end -- if end
    if BaseQuestion.DrawSidePanels then
      DrawWriter("(ID: ".. BOM.PID ..") Base Cabinet Right Side - ".. BaseDim.MaterialThickness .." ".. BOM.BaseCabinetMateralType .."  ( " .. BaseDim.SidePanelWidth .. " x " .. BaseDim.CabHeight .." )", pt1Text, 0.35000, Milling.LNPartLabels, 0.0)
    end
    CutListfileWriterItem(BOM.PID, "Cabinet Right Side", "Base", "1", BaseDim.MaterialThickness, BOM.BaseCabinetMateralType, BaseDim.SidePanelWidth, BaseDim.CabHeight)
-- =====================================================]]
  else --  side  ==  "L"=====================================
-- =====================================================]]
    pt1Text = Polar2D(Cab.Wpt2, 45,  1.5)
    pt2 = Polar2D(Cab.Wpt2, 0, BaseDim.CabHeight)
    pt3 = Polar2D(pt2,     90, BaseDim.SidePanelWidth)
    pt4 = Polar2D(pt3,    180, BaseDim.CabHeight)
    pt5 = Polar2D(pt2,     90, BaseDim.ToeKickDepth - BaseDim.MaterialThickness)
    pt6 = Polar2D(pt5,    180, BaseDim.ToeKickCoverHeight)
    pt7 = Polar2D(pt2,    180, BaseDim.ToeKickCoverHeight)
    if BaseQuestion.DrawSidePanels then
      line:AppendPoint(Cab.Wpt2)
      line:LineTo(pt7)
      line:LineTo(pt6)
      line:LineTo(pt5)
      line:LineTo(pt3)
      line:LineTo(pt4)
      line:LineTo(Cab.Wpt2)
      layer:AddObject(CreateCadContour(line), true)
    end
--  Back Dado
    ptA = Polar2D(pt4, 270, BaseDim.ThicknessBack)
    ptA = Polar2D(ptA, 180, Milling.PocketToolRadius)

    ptD = Polar2D(ptA,  90, BaseDim.ThicknessBack + Milling.RabbitClearance)
    ptB = Polar2D(pt3, 270, BaseDim.ThicknessBack)
    ptB = Polar2D(ptB,   0, Milling.PocketToolRadius)
    ptC = Polar2D(ptB,  90, BaseDim.ThicknessBack + Milling.RabbitClearance)
    ptLD = Polar2D(Polar2D(pt4, 90, Milling.RabbitClearance), 180.0, Milling.RabbitClearance)
    pText = Polar2D(ptA, 350,  2.75 )
    if Milling.AddJointNotes and BaseQuestion.DrawSidePanels then
      DrawWriter("Rabbit - ".. WallDim.ThicknessBack .. " X " ..  Milling.DadoHeight , pText, 0.35, Milling.LNPartLabels,  0.0)
    end -- if end
--  Bottom Dado
    ptF = Polar2D(pt2,   180, BaseDim.ToeKickCoverHeight + BaseDim.ToeKickBottomOffsetHeight - (0.5 * Milling.DadoClearance ))
    ptF = Polar2D(ptF,   270, Milling.PocketToolRadius)

    ptG = Polar2D(pt3,   180, BaseDim.ToeKickCoverHeight + BaseDim.ToeKickBottomOffsetHeight - (0.5 * Milling.DadoClearance ))
    ptG = Polar2D(ptG,    90, Milling.PocketToolRadius)
    ptGA = Polar2D(ptG,  270, Milling.PocketToolRadius + BaseDim.ThicknessBack )
    ptHA = Polar2D(ptGA, 180, BaseDim.MaterialThickness + Milling.DadoClearance)

    ptE = Polar2D(ptF,   180, BaseDim.MaterialThickness + Milling.DadoClearance)
    ptH = Polar2D(ptG,   180, BaseDim.MaterialThickness + Milling.DadoClearance)
    pText = Polar2D(ptF, 120,  2.75 )
    if Milling.AddJointNotes and BaseQuestion.DrawSidePanels then
      DrawWriter("Dado - ".. WallDim.MaterialThickness .. " X " ..  Milling.DadoHeight , pText, 0.35, Milling.LNPartLabels,  90.0)
    end -- if end
--  Top Frame Front Dado
    layer = Milling.job.LayerManager:GetLayerWithName(Milling.LNSidePocket .. "-Base")
    ptO = Polar2D(Cab.Wpt2, 0, BaseDim.MaterialThickness)
    ptN = Polar2D(ptO,     90, BaseDim.TopFrameWidth)
    ptNA = Polar2D(ptN,    90, Milling.PocketToolRadius)
    ptNB = Polar2D(ptNA,  180, Milling.PocketToolDia + Milling.DadoClearance)
    ptNC = Polar2D(ptNB,  270, Milling.PocketToolRadius)
    ptM = Polar2D(ptN,    180, BaseDim.MaterialThickness+ Milling.RabbitClearance)
    ptO = Polar2D(ptO,    270, Milling.RabbitClearance)
    ptP = Polar2D(ptO,    180, BaseDim.MaterialThickness + Milling.RabbitClearance)
    if BaseQuestion.DrawSidePanels then
      line = Contour(0.0)
      line:AppendPoint(ptO)
      line:LineTo(ptNA)
      line:LineTo(ptNB)
      line:LineTo(ptNC)
      line:LineTo(ptM)
      line:LineTo(ptP)
      line:LineTo(ptO)
      layer:AddObject(CreateCadContour(line), true)
    end
--  Top Frame Back Dado
    ptI = Polar2D(pt4,   270, BaseDim.ThicknessBack)
    ptI = Polar2D(ptI,     0, BaseDim.MaterialThickness)
    ptIA = ptI
    ptJ = Polar2D(ptI,   270, BaseDim.TopFrameWidth)
    ptJA = Polar2D(ptJ,  270, Milling.PocketToolRadius)
    ptJB = Polar2D(ptJA, 180, Milling.PocketToolDia + Milling.DadoClearance)
    ptJC = Polar2D(ptJB,  90, Milling.PocketToolRadius)
    ptI = Polar2D(ptI,    90, Milling.RabbitClearance + BaseDim.ThicknessBack + Milling.PocketToolRadius)
    ptK = Polar2D(ptJ,   180, BaseDim.MaterialThickness + Milling.RabbitClearance)
    ptL = Polar2D(ptI,   180, BaseDim.MaterialThickness + Milling.RabbitClearance)
--  Toe Front Dado
    ptR = Polar2D(pt5,    90.0, BaseDim.MaterialThickness)

    ptS = Polar2D(ptR,   180.0, BaseDim.ToeKickCoverHeight)
    ptSA = Polar2D(ptS,  180.0, Milling.PocketToolRadius + BaseDim.ToeKickBottomOffsetHeight - (0.5 * Milling.DadoClearance ))
    ptFSA = Polar2D(ptS, 180.0, BaseDim.ToeKickBottomOffsetHeight - (0.5 * Milling.DadoClearance ))
    ptSB = Polar2D(ptSA, 270.0, BaseDim.MaterialThickness + Milling.DadoClearance)
    ptSC = Polar2D(ptS,  270.0, BaseDim.MaterialThickness + Milling.DadoClearance)
    ptFSB = Polar2D(ptSC, 180.0, BaseDim.ToeKickBottomOffsetHeight - (0.5 * Milling.DadoClearance ))
    ptR = Polar2D(ptR,     0.0, Milling.RabbitClearance)
    ptQ = Polar2D(ptR,   270.0, BaseDim.MaterialThickness + Milling.RabbitClearance)
    ptT = Polar2D(ptS,   270.0, BaseDim.MaterialThickness + Milling.RabbitClearance)

    if BaseQuestion.DrawSidePanels then
      line = Contour(0.0)
      line:AppendPoint(ptK)
      line:LineTo(ptLD)  ;    line:LineTo(ptC)
      line:LineTo(ptB)   ;    line:LineTo(ptGA)
      line:LineTo(ptFSA) ;    line:LineTo(ptR)
      line:LineTo(ptQ)   ;    line:LineTo(ptT)
      line:LineTo(ptSC)  ;    line:LineTo(ptFSB)
      line:LineTo(ptF)   ;    line:LineTo(ptE)
      line:LineTo(ptHA)  ;    line:LineTo(ptIA)
      line:LineTo(ptJA)  ;    line:LineTo(ptJB)
      line:LineTo(ptJC)  ;    line:LineTo(ptK)
      layer:AddObject(CreateCadContour(line), true)
    end
    -- Strecher Pocket
     if BaseQuestion.AddStrecherPocket and BaseQuestion.DrawSidePanels then
      if BaseQuestion.DrawerRowCount >= 1 then
        AX = Cab.Wpt2
        DrawerRowCountX = 1
        while DrawerRowCountX <= BaseQuestion.DrawerRowCount do
          if DrawerRowCountX == 3 then
            DrawerHeight = BaseDim.FaceFrameDrawerHeight3 + BaseDim.FaceFrameMidRailWidth + (BaseDim.FaceFrameMidRailWidth * 0.5)
          end -- if end
          if DrawerRowCountX ==2 then
            DrawerHeight = BaseDim.FaceFrameDrawerHeight2 + BaseDim.FaceFrameMidRailWidth + (BaseDim.FaceFrameMidRailWidth * 0.5)
          end -- if end
          if DrawerRowCountX == 1 then
            DrawerHeight = BaseDim.FaceFrameDrawerHeight1 + BaseDim.FaceFrameTopRailWidth + (BaseDim.FaceFrameMidRailWidth * 0.5)
          end -- if end
          AX = Polar2D(AX,  0.0, DrawerHeight)
          Base_StrecherPocket(AX, 90)
          DrawerRowCountX = DrawerRowCountX+1
        end -- while end
      end -- if end
    end -- if end

    if BaseQuestion.DrawSidePanels then
      DrawWriter("(ID: " .. BOM.PID .. ") Base Cabinet Left Side - ".. BaseDim.MaterialThickness .." " ..BOM.BaseCabinetMateralType .. "  ( " .. BaseDim.SidePanelWidth .. " x " .. BaseDim.CabHeight .." )", pt1Text, 0.35000, Milling.LNPartLabels, 0.0)
    end
    CutListfileWriterItem(BOM.PID, "Cabinet Left Side ", "Base", "1", BaseDim.MaterialThickness, BOM.BaseCabinetMateralType, BaseDim.SidePanelWidth, BaseDim.CabHeight)
  end
  if BaseQuestion.ShelfCount >= 1 and BaseQuestion.DrawSidePanels then
    ptx = Cab.Wpt1
    anx = 90
    if side  ==  "L" then
      ptx = Polar2D(Polar2D(Cab.Wpt2, 0, BaseDim.HoleDrop), 90, BaseDim.ShelfPinHoleFront)
    else
      ptx = Polar2D(Polar2D(Cab.Wpt1, 0, BaseDim.HoleDrop), 90, ( BaseDim.ThicknessBack + BaseDim.ShelfPinHoleBack))
    end -- if end
    rows = BaseDim.HoleRows
    while (rows > 0) do
      Holer(ptx, anx, BaseDim.HoleSpace, Milling.ShelfPinRadius, Milling.LNSideShelfPinDrill .. "-Base")
      ptx = Polar2D(ptx, 0.0, BaseDim.ShelfHoleSpacing)
      rows = (rows - 1.0)
    end -- while end
  end -- if end
  return true
end
-- =====================================================]]
function Base_CenterPanel()
  BOM.PID = BOM.PID + 10
  local pt1Text = Cab.Wpt10
  -- local pt1 = Polar2D(Cab.Wpt10, 0.0, BaseDim.MaterialThickness )
  local pt2 = Polar2D(Cab.Wpt10, 0.0, BaseDim.CenterPanelLength)
  local pt3 = Polar2D(pt2,     90.0, BaseDim.CenterPanelWidth)
  local pt4 = Polar2D(pt3,    180.0, BaseDim.CenterPanelLength)
  if BaseQuestion.DrawCenterPanel then
    DrawBox(Cab.Wpt10, pt2, pt3, pt4, Milling.LNCenterPanelProfile .. "-Base")
    pt1Text = Polar2D(Cab.Wpt10, 45,  1.75)
    DrawWriter("(ID: " .. BOM.PID .. ") Base Cabinet Center Panel - ".. BaseDim.MaterialThickness .. " " .. BOM.BaseCabinetMateralType .. "  (" .. BaseDim.CenterPanelWidth .. " x " .. BaseDim.CenterPanelLength ..")", pt1Text, 0.35000, Milling.LNPartLabels, 0.0)
  end -- if end
  CutListfileWriterItem(BOM.PID, "Cabinet Center Panel", "Base", "1", BaseDim.MaterialThickness, BOM.BaseCabinetMateralType, BaseDim.CenterPanelWidth, BaseDim.CenterPanelLength)
  if BaseQuestion.DrawCenterPanel and (BaseQuestion.ShelfCount >= 1) then
    local ptx = Polar2D(Polar2D(Cab.Wpt10, 0.0, BaseDim.HoleDrop), 90.0, BaseDim.ShelfPinHoleFront)
    local rows = BaseDim.HoleRows
    while (rows >0) do
      Holer(ptx, 90.0, BaseDim.HoleSpace, Milling.ShelfPinRadius, Milling.LNCenterPanelShelfPinDrill .. "-Base")
      ptx = Polar2D(ptx, 0.0, BaseDim.ShelfHoleSpacing)
      rows = (rows - 1.0)
    end -- While end
  end -- if end
  return true
end
-- =====================================================]]
function Base_StrecherPocket(p1, Ang)
  local X1 = Cab.Wpt1
  local X2 = Cab.Wpt1
  local X3 = Cab.Wpt1
  local X4 = Cab.Wpt1
  local X5 = Cab.Wpt1
  local X6 = Cab.Wpt1
  local X7 = Cab.Wpt1
  local X8 = Cab.Wpt1
  if Ang == 270 then
    X1 = Polar2D(Polar2D(p1, 90.0, Milling.PocketToolRadius ), 180.0, ((BaseDim.StretcherThickness  + Milling.DadoClearance) * 0.5 ))
    X2 = Polar2D(X1, 270.0, BaseDim.StretcherWidth - Milling.PocketToolRadius )
    X3 = Polar2D(X2, 180.0, Milling.PocketToolRadius)
    X4 = Polar2D(X3, 270.0, Milling.PocketToolDia)
    X5 = Polar2D(X4,   0.0, BaseDim.StretcherThickness+ Milling.DadoClearance + Milling.PocketToolDia )
    X6 = Polar2D(X5,  90.0, Milling.PocketToolDia)
    X7 = Polar2D(X6, 180.0, Milling.PocketToolRadius)
    X8 = Polar2D(X1,   0.0, BaseDim.StretcherThickness  + Milling.DadoClearance)
  end -- if end
  if Ang == 90 then
    X1 = Polar2D(Polar2D(p1, 270.0, Milling.PocketToolRadius), 0.0, ((BaseDim.StretcherThickness + Milling.DadoClearance) * 0.5 ))
    X2 = Polar2D(X1,  90.0, BaseDim.StretcherWidth - Milling.PocketToolRadius )
    X3 = Polar2D(X2,   0.0, Milling.PocketToolRadius)
    X4 = Polar2D(X3,  90.0, Milling.PocketToolDia)
    X5 = Polar2D(X4, 180.0, BaseDim.StretcherThickness + Milling.DadoClearance + Milling.PocketToolDia )
    X6 = Polar2D(X5, 270.0, Milling.PocketToolDia)
    X7 = Polar2D(X6,   0.0, Milling.PocketToolRadius)
    X8 = Polar2D(X1, 180.0, BaseDim.StretcherThickness  + Milling.DadoClearance)
  end -- if end
  local layer = Milling.job.LayerManager:GetLayerWithName(Milling.LNSidePocket .. "-Base")
  local line = Contour(0.0)
  line:AppendPoint(X1)
  line:LineTo(X2)
  line:LineTo(X3)
  line:LineTo(X4)
  line:LineTo(X5)
  line:LineTo(X6)
  line:LineTo(X7)
  line:LineTo(X8)
  line:LineTo(X1)
  layer:AddObject(CreateCadContour(line), true)
  return true
end
-- =====================================================]]
function Base_Math()  --  All the math for Wall Cabinet
  Project.DrawerID             = StartDate()
  BaseDim.BackPanelWidth       = BaseDim.CabHeight
  BaseDim.SidePanelWidth       = BaseDim.CabDepth - BaseDim.FaceFrameThickness
  BaseDim.SidePanelLength      = BaseDim.CabHeight
  BaseDim.TopBottomPanelWidth  = (BaseDim.CabDepth - BaseDim.FaceFrameThickness) - Milling.DadoBackHeight
  BaseDim.BackPanelLength      = BaseDim.CabLength - ((Milling.DadoHeight + BaseDim.FaceFrameSideReveal) * 2.0)
  BaseDim.TopBottomPanelLength = BaseDim.BackPanelLength
  BaseDim.FaceFrameStileLength = BaseDim.CabHeight - BaseDim.ToeKickHeight
  BaseDim.FaceFrameRailLength  = BaseDim.CabLength - ( BaseDim.FaceFrameStileWidth * 2.0)
  BaseDim.ShelfWidth           = BaseDim.CabDepth - (BaseDim.ThicknessBack + BaseDim.FaceFrameThickness + BaseDim.ShelfFrontClearance)
  BaseDim.ToeKickCoverHeight   = ((BaseDim.ToeKickHeight + BaseDim.FaceFrameBottomRailWidth) - (BaseDim.FaceFrameBottomReveal + BaseDim.MaterialThickness + BaseDim.ToeKickBottomOffsetHeight ))
  BaseDim.FaceFrameStileLength = BaseDim.CabHeight
  BaseDim.FaceFrameRailLength = BaseDim.CabLength - (BaseDim.FaceFrameStileWidth * 2.0)
 -- BaseDim.FaceFrameCenterStileLength = BaseDim.CabHeight - (BaseDim.FaceFrameBottomRailWidth + BaseDim.FaceFrameTopRailWidth)
  if BaseQuestion.AddCenterPanel then
    BaseDim.ShelfLength              = (BaseDim.CabLength - ((BaseDim.FaceFrameSideReveal * 2.0) + (BaseDim.MaterialThickness  * 3.0) + (BaseDim.ShelfEndClarence * 4.0)))* 0.5
    BaseDim.ShelfNoseLength          = BaseDim.ShelfLength
    BaseQuestion.NumberDrawersPerRow = 2
    BaseQuestion.AddCenterFaceFrame  = true
    BaseQuestion.AddStrecherPocket   = false
  else
    BaseDim.ShelfLength              = (BaseDim.CabLength - (((BaseDim.MaterialThickness  + BaseDim.FaceFrameSideReveal) * 2.0) + (BaseDim.ShelfEndClarence * 2.0)))
    BaseDim.ShelfNoseLength          = BaseDim.ShelfLength
    BaseQuestion.NumberDrawersPerRow = 1
    BaseQuestion.AddCenterFaceFrame  = false
    BaseQuestion.AddStrecherPocket   = true
  end -- if end

  if BaseQuestion.DrawerRowCount == 3 then
    BaseDim.HoleDrop = BaseDim.ShelfHoleFirstRowSpacing + BaseDim.FaceFrameTopRailWidth + BaseDim.FaceFrameDrawerHeight1 + BaseDim.FaceFrameMidRailWidth + BaseDim.FaceFrameDrawerHeight2 + BaseDim.FaceFrameMidRailWidth + BaseDim.FaceFrameDrawerHeight3 + BaseDim.FaceFrameMidRailWidth
    BOM.Holes = false
  elseif BaseQuestion.DrawerRowCount == 2 then
    BaseDim.HoleDrop = BaseDim.ShelfHoleFirstRowSpacing + BaseDim.FaceFrameTopRailWidth + BaseDim.FaceFrameDrawerHeight1 + BaseDim.FaceFrameMidRailWidth + BaseDim.FaceFrameDrawerHeight2 + BaseDim.FaceFrameMidRailWidth
  elseif BaseQuestion.DrawerRowCount == 1 then
    BaseDim.HoleDrop = BaseDim.ShelfHoleFirstRowSpacing + BaseDim.FaceFrameTopRailWidth + BaseDim.FaceFrameDrawerHeight1 + BaseDim.FaceFrameMidRailWidth
  else
    BaseDim.HoleDrop = BaseDim.ShelfHoleFirstRowSpacing + BaseDim.FaceFrameTopRailWidth + BaseDim.FaceFrameMidRailWidth
  end -- if end

  if BaseQuestion.ShelfCount >= 1 then
    BaseDim.ShelfDistance = (BaseDim.ShelfLength + Milling.PartGap) * BaseQuestion.ShelfCount
  else
    BaseDim.ShelfDistance = 0.0
  end
  --Set Work Points
  if BaseQuestion.AddFaceFrame == false then
    BaseDim.FaceFrameTopRailWidth    = 0.0
    BaseDim.FaceFrameBottomRailWidth = 0.0
    BaseDim.FaceFrameBottomReveal    = 0.0
    BaseDim.FaceFrameTopOverlap      = 0.0
  end -- if end

  Cab.pt1b    = Polar2D(Cab.Wpt1, 0.0, BaseDim.CabHeight)                    --  Right Side Panel Bottom
  Cab.Wpt2    = Polar2D(Cab.pt1b, 0.0, Milling.PartGap)                      --  Left Side Panel
  Cab.pt2b    = Polar2D(Cab.Wpt2, 0.0, BaseDim.CabHeight)                    --  Left Side Panel Bottom
  Cab.Wpt3    = Polar2D(Cab.pt2b, 0.0, Milling.PartGap)                      --  Base Bottom Panel
  Cab.pt3b    = Polar2D(Cab.Wpt3, 0.0, BaseDim.TopBottomPanelWidth)          --  Base Bottom Panel
  Cab.Wpt4    = Polar2D(Cab.pt3b, 0.0, Milling.PartGap)                      --  Base Top Stricher
  Cab.pt4b    = Polar2D(Cab.Wpt4, 0.0, BaseDim.StretcherWidth)               --  Base Top Stricher 1 Bottom
  Cab.Wpt5    = Polar2D(Cab.pt4b, 0.0, Milling.PartGap)                      --  Base Top Strichers 2
  Cab.pt5b    = Polar2D(Cab.Wpt5, 0.0, BaseDim.StretcherWidth)               --  Base Top Stricher 2 Bottom
  Cab.Wpt6    = Polar2D(Cab.pt5b, 0.0, Milling.PartGap)                      --  Base Toe Kick
  Cab.pt6b    = Polar2D(Cab.Wpt6, 0.0, BaseDim.ToeKickCoverHeight)           --  Base Toe Kick Bottom
  Cab.Wpt7    = Polar2D(Cab.pt6b, 0.0, Milling.PartGap)                      --  Base Back
  Cab.pt7b    = Polar2D(Cab.Wpt7, 0.0, BaseDim.CabHeight)                    --  Base Back Bottom
  Cab.Wpt8    = Polar2D(Cab.pt7b, 0.0, Milling.PartGap)                      --  Base Face Frame
  if BaseQuestion.ShelfCount == 0 then -- Shelf Location
    Cab.Wpt9  = Polar2D(Cab.Wpt1, 90.0, (BaseDim.BackPanelLength + Milling.PartGap - BaseDim.FaceFrameThickness)) --  Shelves
    Cab.pt9b  = Cab.Wpt9
    Cab.Wpt10 = Cab.Wpt9
  else
    if BaseDim.ShelfDistance < ((BaseDim.CabHeight + Milling.PartGap)  * 2.0) then
      Cab.Wpt9 = Polar2D(Cab.Wpt1, 90.0, (BaseDim.CabDepth        + Milling.PartGap - BaseDim.FaceFrameThickness)) --  Shelves
      Cab.pt9b = Polar2D(Cab.Wpt9,  0.0, BaseDim.ShelfDistance)                                                     --  Shelves bottom
    else
      Cab.Wpt9  = Polar2D(Cab.Wpt1, 90.0, (BaseDim.BackPanelLength + Milling.PartGap - BaseDim.FaceFrameThickness)) --  Shelves
      Cab.pt9b  = Polar2D(Cab.Wpt9, 0.0, BaseDim.ShelfDistance     - Milling.PartGap)                               --  Shelves bottom
      Cab.Wpt10 = Polar2D(Cab.Wpt1, 90.0, (BaseDim.BackPanelLength + Milling.PartGap - BaseDim.FaceFrameThickness)) --  Shelves
    end -- if end

  end -- if end
  Cab.pt9a = Cab.Wpt9
  BaseDim.HoleSpace            = BaseDim.SidePanelWidth - (BaseDim.ThicknessBack + BaseDim.ShelfPinHoleFront + BaseDim.ShelfPinHoleBack)
  BaseDim.HoleRows             = (BaseDim.FaceFrameStileLength - (BaseDim.HoleDrop + BaseDim.ShelfHoleFirstRowSpacing + BaseDim.ShelfHoleLastRowSpacing)) / BaseDim.ShelfHoleSpacing
  BaseDim.CenterPanelLength    = (BaseDim.SidePanelLength + Milling.DadoHeight) - (BaseDim.ToeKickCoverHeight + BaseDim.ToeKickBottomOffsetHeight + (BaseDim.MaterialThickness * 2.0))
  BaseDim.CenterPanelWidth     = BaseDim.TopBottomPanelWidth
  if BaseQuestion.AddCenterPanel then   -- Center Panel Location
    Cab.pt10b  = Polar2D(Cab.pt9a,   0.0, BaseDim.CenterPanelLength + BaseDim.ShelfDistance)            --  Base Center Panel

    if GetDistance(Cab.pt9a, Cab.pt10b) > GetDistance(Cab.Wpt1, Cab.Wpt3) then
      Cab.Wpt10 = Polar2D(Cab.Wpt9, 90.0, BaseDim.ShelfWidth + Milling.PartGap)              --  Base Center Panel
      Cab.pt9b  = Polar2D(Cab.Wpt9,  0.0, BaseDim.ShelfDistance - Milling.PartGap)               --  Shelves bottom
      -- DebugMarkPoint("Cab.Wpt10-A",Cab.Wpt10 ,4,"Debug")
    else
      Cab.Wpt10 = Polar2D(Cab.Wpt9,  0.0, BaseDim.ShelfDistance + Milling.PartGap)               --  Base Center Panel
      Cab.pt9b  = Polar2D(Cab.Wpt9,  0.0, BaseDim.ShelfDistance - Milling.PartGap)               --  Shelves bottom
        --DebugMarkPoint("Cab.Wpt10-B",Cab.Wpt10 ,4,"Debug")
    end -- if end
  end -- if end
  return true
end
-- =====================================================]]
function Base_CabinetBottom()
  BOM.PID = BOM.PID + 10
  local pt2 = Polar2D(Cab.Wpt3, 0, BaseDim.TopBottomPanelWidth)
  local ptC = Polar2D(Cab.Wpt3, 90, (BaseDim.TopBottomPanelLength * 0.5))

  local pt3 = Polar2D(pt2, 90, BaseDim.TopBottomPanelLength)
  local pt4 = Polar2D(pt3,  180, BaseDim.TopBottomPanelWidth)
  local ptW = Polar2D(Polar2D (ptC, 270, ((BaseDim.MaterialThickness + Milling.DadoClearance) * 0.5)), 180, Milling.ProfileToolRadius)
  local ptX = Polar2D(ptW, 90, BaseDim.MaterialThickness + Milling.DadoClearance)
  local ptY = Polar2D(ptX,  0, BaseDim.TopBottomPanelWidth + (Milling.ProfileToolRadius * 2))
  local ptZ = Polar2D(ptW,  0, BaseDim.TopBottomPanelWidth + (Milling.ProfileToolRadius * 2))
  local pt1Text = Cab.Wpt1

  local line = Contour(0.0)
  if BaseQuestion.AddCenterPanel and BaseQuestion.DrawBottomPanel then
    DrawBox(ptW, ptX, ptY, ptZ, Milling.LNTopBottomPocket .. "-Base")
    pt1Text = Polar2D(ptW, 340,  1.75 )
    if Milling.AddJointNotes then
      DrawWriter("Dado - ".. WallDim.MaterialThickness .. " X " ..  Milling.DadoHeight , pt1Text, 0.35, Milling.LNPartLabels,  0.0)
    end

  end
  if BaseQuestion.DrawBottomPanel then
    DrawBox(Cab.Wpt3, pt2, pt3, pt4, Milling.LNTopBottomProfile .. "-Base")
    pt1Text = Polar2D(Cab.Wpt3, 45,  1.5)
    DrawWriter("(ID: " .. BOM.PID .. ") Base Cabinet Bottom - ".. BaseDim.MaterialThickness .." " .. BOM.BaseCabinetMateralType .. "  ( " .. BaseDim.TopBottomPanelLength .. " x " .. BaseDim.TopBottomPanelWidth.." )", pt1Text, 0.35, Milling.LNPartLabels, 0.0)
  end
  CutListfileWriterItem(BOM.PID, "Cabinet Bottom", "Base", "1", BaseDim.MaterialThickness, BOM.BaseCabinetMateralType, BaseDim.TopBottomPanelLength, BaseDim.TopBottomPanelWidth)
  return true
end
-- =====================================================]]
function Base_CabinetFaceFrame()
  local Dist = 0.0
  local pt1Text = Cab.Wpt8
  local A1, B1, C1, D1
  local A2, B2, C2, D2
  local A3, B3, C3, D3
  local A2x, B2x, C2x, D2x
  local lastBit
  BOM.PID = BOM.PID + 10
--  Draw outer frame box
  local pt2 = Polar2D(Cab.Wpt8, 0.0,  BaseDim.FaceFrameStileLength)
  local pt3 = Polar2D(pt2, 90.0,  BaseDim.FaceFrameRailLength+(BaseDim.FaceFrameStileWidth*2.0))
  local pt4 = Polar2D(pt3,  180.0,  BaseDim.FaceFrameStileLength)
  -- Draw Stile Lines
  A1 = Polar2D(Cab.Wpt8, 90.0,  BaseDim.FaceFrameStileWidth)
  B1 = Polar2D(pt2, 90.0,  BaseDim.FaceFrameStileWidth)
  C1 = Polar2D(pt3,  270.0,  BaseDim.FaceFrameStileWidth)
  D1 = Polar2D(pt4,  270.0,  BaseDim.FaceFrameStileWidth)
  pt1Text = Polar2D(Cab.Wpt8, 5,  8.75 )

  if BaseQuestion.DrawFaceFrame then
    DrawBox(Cab.Wpt8, pt2, B1, A1, Milling.LNDrawFaceFrame .. "-Base")
    DrawWriter("APart ID: " .. BOM.PID, pt1Text, 0.40, Milling.LNPartLabels,  0.0)
    DrawBox(D1, C1,pt3, pt4, Milling.LNDrawFaceFrame .. "-Base")
    pt1Text = Polar2D(pt4, 355,  8.75 )
    DrawWriter("BPart ID: " .. BOM.PID, pt1Text, 0.40, Milling.LNPartLabels,  0.0)
    CutListfileWriterItem(BOM.PID, "Face Frame Stile", "Base", "2", BaseDim.FaceFrameThickness, BOM.BaseFaceFrameMateralType, BaseDim.FaceFrameStileWidth, BaseDim.FaceFrameStileLength)
  else
    CutListfileWriterItem(BOM.PID, "Face Frame Stile", "Base", "2", BaseDim.FaceFrameThickness, BOM.BaseFaceFrameMateralType, BaseDim.FaceFrameStileWidth, BaseDim.FaceFrameStileLength)
  end -- if end
  BOM.PID = BOM.PID + 10
--  Draw the Top and Bottom rails
  A2 = Polar2D(A1, 0.0, BaseDim.FaceFrameTopRailWidth)
  B2 = Polar2D(B1, 180.0, BaseDim.FaceFrameBottomRailWidth)
  C2 = Polar2D(C1, 180.0, BaseDim.FaceFrameBottomRailWidth)
  D2 = Polar2D(D1, 0.0, BaseDim.FaceFrameTopRailWidth)
  BaseDim.FaceFrameRailLength = GetDistance(A2, D2)
  local DrawerHeight  = 0.0

  --  Draw the Top rail
  if BaseQuestion.DrawFaceFrame then
    DrawBox(A1, A2, D2, D1, Milling.LNDrawFaceFrame .. "-Base")
    pt1Text = Polar2D(A1, 85,  8.75 )
    DrawWriter("CPart ID: " .. BOM.PID, pt1Text, 0.40, Milling.LNPartLabels,  90.0)
    CutListfileWriterItem(BOM.PID, "Face Frame Top Rail", "Base", "1", BaseDim.FaceFrameThickness, BOM.BaseFaceFrameMateralType, BaseDim.FaceFrameTopRailWidth, BaseDim.FaceFrameRailLength )
  else
    BOM.PID = BOM.PID + 10
    CutListfileWriterItem(BOM.PID, "Face Frame Top Rail", "Base", "1", BaseDim.FaceFrameThickness, BOM.BaseFaceFrameMateralType, BaseDim.FaceFrameTopRailWidth, BaseDim.FaceFrameRailLength )
  end -- if end
  --  Draw the Bottom rail
  if BaseQuestion.DrawFaceFrame then
    BOM.PID = BOM.PID + 10
    B2x = B2
    C2x = C2

    pt1Text = Polar2D(B2, 85,  8.75 )
    CutListfileWriterItem(BOM.PID, "Face Frame Bottom Rail", "Base", "1", BaseDim.FaceFrameThickness, BOM.BaseFaceFrameMateralType, BaseDim.FaceFrameBottomRailWidth, BaseDim.FaceFrameRailLength )
    DrawBox(B2, B1, C1, C2, Milling.LNDrawFaceFrame .. "-Base") -- Bottom Rail
    DrawWriter("DPart ID: " .. BOM.PID, pt1Text, 0.40, Milling.LNPartLabels,  90.0)
  else
    BOM.PID = BOM.PID + 10
    CutListfileWriterItem(BOM.PID, "Face Frame Bottom Rail", "Base", "1", BaseDim.FaceFrameThickness, BOM.BaseFaceFrameMateralType, BaseDim.FaceFrameBottomRailWidth, BaseDim.FaceFrameRailLength )
  end -- if end
  -- ===========================================
  local DrawerRowCountF = BaseQuestion.DrawerRowCount
  -- ============
  BOM.PID = BOM.PID + 10
  if DrawerRowCountF == 3 then
    Cab.A1 = Polar2D(A1, 0.0, BaseDim.FaceFrameTopRailWidth)
    Cab.A2 = Polar2D(D1, 0.0, BaseDim.FaceFrameTopRailWidth)
    Base_FFRows(BaseDim.FaceFrameDrawerHeight1, Cab.A1,  Cab.A2, true)
    BOM.PID = BOM.PID + 10
    Cab.A1 = Polar2D(Cab.A1, 0.0, BaseDim.FaceFrameMidRailWidth + BaseDim.FaceFrameDrawerHeight1)
    Cab.A2 = Polar2D(Cab.A2, 0.0, BaseDim.FaceFrameMidRailWidth + BaseDim.FaceFrameDrawerHeight1)
    Base_FFRows(BaseDim.FaceFrameDrawerHeight2, Cab.A1,  Cab.A2, true)
    BOM.PID = BOM.PID + 10
    Cab.A1 = Polar2D(Cab.A1, 0.0, BaseDim.FaceFrameMidRailWidth + BaseDim.FaceFrameDrawerHeight2)
    Cab.A2 = Polar2D(Cab.A2, 0.0, BaseDim.FaceFrameMidRailWidth + BaseDim.FaceFrameDrawerHeight2)
    Base_FFRows(BaseDim.FaceFrameDrawerHeight3, Cab.A1,  Cab.A2, true)
    --BOM.PID = BOM.PID + 10
    Cab.A1 = Polar2D(Cab.A1, 0.0, BaseDim.FaceFrameMidRailWidth + BaseDim.FaceFrameDrawerHeight3)
    Cab.A2 = Polar2D(Cab.A2, 0.0, BaseDim.FaceFrameMidRailWidth + BaseDim.FaceFrameDrawerHeight3)
    lastBit = BaseDim.FaceFrameStileLength - ((BaseDim.FaceFrameMidRailWidth * 3) + BaseDim.FaceFrameTopRailWidth + BaseDim.FaceFrameBottomRailWidth + (BaseDim.FaceFrameDrawerHeight1 + BaseDim.FaceFrameDrawerHeight2 + BaseDim.FaceFrameDrawerHeight3))
    Base_FFRows(lastBit, Cab.A1,  Cab.A2, false)
  end
    -- ============
  if DrawerRowCountF == 2 then
    Cab.A1 = Polar2D(A1, 0.0, BaseDim.FaceFrameTopRailWidth)
    Cab.A2 = Polar2D(D1, 0.0, BaseDim.FaceFrameTopRailWidth)
    Base_FFRows(BaseDim.FaceFrameDrawerHeight1, Cab.A1,  Cab.A2, true)
    BOM.PID = BOM.PID + 10
    Cab.A1 = Polar2D(Cab.A1, 0.0, BaseDim.FaceFrameMidRailWidth + BaseDim.FaceFrameDrawerHeight1)
    Cab.A2 = Polar2D(Cab.A2, 0.0, BaseDim.FaceFrameMidRailWidth + BaseDim.FaceFrameDrawerHeight1)
    Base_FFRows(BaseDim.FaceFrameDrawerHeight2, Cab.A1,  Cab.A2, true)

    Cab.A1 = Polar2D(A1, 0.0, BaseDim.FaceFrameTopRailWidth + (BaseDim.FaceFrameMidRailWidth * 2) + BaseDim.FaceFrameDrawerHeight2 + BaseDim.FaceFrameDrawerHeight1)
    Cab.A2 = Polar2D(D1, 0.0, BaseDim.FaceFrameTopRailWidth + (BaseDim.FaceFrameMidRailWidth * 2) + BaseDim.FaceFrameDrawerHeight2 + BaseDim.FaceFrameDrawerHeight1)
    --BOM.PID = BOM.PID + 10
    lastBit = BaseDim.FaceFrameStileLength - ((BaseDim.FaceFrameMidRailWidth * 2) + BaseDim.FaceFrameTopRailWidth + BaseDim.FaceFrameBottomRailWidth + (BaseDim.FaceFrameDrawerHeight1 + BaseDim.FaceFrameDrawerHeight2))
    Base_FFRows(lastBit, Cab.A1,  Cab.A2, false)
  end
    -- ============
  if DrawerRowCountF == 1 then
    Cab.A1 = Polar2D(A1, 0.0, BaseDim.FaceFrameTopRailWidth)
    Cab.A2 = Polar2D(D1, 0.0, BaseDim.FaceFrameTopRailWidth)
    Base_FFRows(BaseDim.FaceFrameDrawerHeight1, Cab.A1,  Cab.A2, true)

    Cab.A1 = Polar2D(A1, 0.0, BaseDim.FaceFrameTopRailWidth + BaseDim.FaceFrameMidRailWidth + BaseDim.FaceFrameDrawerHeight1)
    Cab.A2 = Polar2D(D1, 0.0, BaseDim.FaceFrameTopRailWidth + BaseDim.FaceFrameMidRailWidth + BaseDim.FaceFrameDrawerHeight1)
    --BOM.PID = BOM.PID + 10
    lastBit = BaseDim.FaceFrameStileLength - (BaseDim.FaceFrameMidRailWidth  + BaseDim.FaceFrameTopRailWidth + BaseDim.FaceFrameBottomRailWidth + BaseDim.FaceFrameDrawerHeight1)
    Base_FFRows(lastBit, Cab.A1,  Cab.A2, false)

  end
  -- ============
  if DrawerRowCountF == 0 then
    Cab.A1 = Polar2D(A1, 0.0, BaseDim.FaceFrameTopRailWidth)
    Cab.A2 = Polar2D(D1, 0.0, BaseDim.FaceFrameTopRailWidth)
    lastBit = BaseDim.FaceFrameStileLength - (BaseDim.FaceFrameTopRailWidth + BaseDim.FaceFrameBottomRailWidth)
    Base_FFRows(lastBit, Cab.A1,  Cab.A2, false)
  end

  pt1Text = Polar2D(pt2, 0,  (BaseDim.FaceFrameStileWidth * 1.5))
  pt1Text = Polar2D(Cab.Wpt1, 90,  45.0)
  DrawWriter(Project.ProgramName, pt1Text, 1.250, Milling.LNDrawNotes, 0.0)
  pt1Text = Polar2D(pt1Text, 270, 1.25)
  DrawWriter("Cabinet ID: " .. Project.DrawerID, pt1Text, 0.750, Milling.LNDrawNotes, 0.0)
  pt1Text = Polar2D(pt1Text, 270,1)
  DrawWriter("Cabnet Name: " .. Project.CabinetName, pt1Text, 0.750, Milling.LNDrawNotes, 0.0)
  pt1Text = Polar2D(pt1Text, 270,1)
  DrawWriter("Version: " .. Project.ProgramVersion, pt1Text, 0.750, Milling.LNDrawNotes, 0.0)
  pt1Text = Polar2D(pt1Text, 270,1)
  DrawWriter("Code By: " .. Project.ProgramCodeBy, pt1Text, 0.750, Milling.LNDrawNotes, 0.0)
  return true
end
-- =====================================================]]
function Base_FFRows(DrawerHeight, A2x, D2x, xx)
  local A2 = Polar2D(A2x, 0, DrawerHeight)
  local D2 = Polar2D(D2x, 0, DrawerHeight)
  local B2 = Polar2D(A2,  0, BaseDim.FaceFrameMidRailWidth)
  local C2 = Polar2D(D2,  0, BaseDim.FaceFrameMidRailWidth)
  local Dist = 1.0
  local A3, B3, C3, D3
  local pt1Text
  if xx then
    pt1Text = Polar2D(A2, 85,  8.75 )
    if BaseQuestion.DrawFaceFrame then
      DrawBox(A2, B2, C2, D2, Milling.LNDrawFaceFrame .. "-Base")
       DrawWriter("Part ID: ".. BOM.PID, pt1Text, 0.4, Milling.LNPartLabels,  90.0)
      CutListfileWriterItem(BOM.PID, "Face Frame Mid Rail", "Base", "1", BaseDim.FaceFrameThickness, BOM.BaseFaceFrameMateralType, BaseDim.FaceFrameCenterStileWidth, GetDistance(A2, D2) )
    else
      CutListfileWriterItem(BOM.PID, "Face Frame Mid Rail", "Base", "1", BaseDim.FaceFrameThickness, BOM.BaseFaceFrameMateralType, BaseDim.FaceFrameCenterStileWidth, GetDistance(A2, D2) )
    end -- if end
  end -- if end
  -- ===========
  if BaseQuestion.AddCenterFaceFrame then
    Dist = ((BaseDim.CabLength * 0.5) - (BaseDim.FaceFrameStileWidth + (BaseDim.FaceFrameCenterStileWidth * 0.5) ))
    A3 = Polar2D(A2,  90.0, Dist)
    D3 = Polar2D(D2, 270.0, Dist)
    B3 = Polar2D(A3, 180.0, DrawerHeight)
    C3 = Polar2D(D3, 180.0, DrawerHeight)
    if BaseQuestion.DrawFaceFrame then
      BOM.PID = BOM.PID + 10
      DrawBox(A3, D3, C3, B3, Milling.LNDrawFaceFrame .. "-Base")
      pt1Text = Polar2D(B3, 25,  0.75 )
      DrawWriter("Part ID: ".. BOM.PID, pt1Text, 0.4, Milling.LNPartLabels,  0.0)
      CutListfileWriterItem(BOM.PID, "Face Frame Center", "Base", "1", BaseDim.FaceFrameThickness, BOM.BaseFaceFrameMateralType, BaseDim.FaceFrameCenterStileWidth, GetDistance(A3, B3))
    else
      BOM.PID = BOM.PID + 10
      CutListfileWriterItem(BOM.PID, "Face Frame Center", "Base", "1", BaseDim.FaceFrameThickness, BOM.BaseFaceFrameMateralType, BaseDim.FaceFrameCenterStileWidth, GetDistance(A3, B3))
    end -- if end
  end -- if end
  return true
end -- function end
-- =====================================================]]
function Base_CabinetShelf(CountX)
  local pt1Text = Cab.Wpt1
  if BaseQuestion.AddCenterPanel then
    BaseDim.PartLength = ((BaseDim.CabLength - (BaseDim.MaterialThickness * 2.0) - (BaseDim.ShelfEndClarence * 4.0)) * 0.5)
  else
    BaseDim.PartLength = (BaseDim.CabLength - (BaseDim.MaterialThickness * 2.0) - (BaseDim.ShelfEndClarence * 2))
  end -- if end
  local LSD = BaseDim.CabDepth - (BaseDim.ThicknessBack + BaseDim.FaceFrameThickness + BaseDim.ShelfFrontClearance)
  local pt2 = Polar2D(Cab.Wpt9, 0,  BaseDim.ShelfLength)
  local pt3 = Polar2D(pt2, 90,  LSD)
  local pt4 = Polar2D(pt3, 180, BaseDim.ShelfLength)
  local pt2pt3 = GetDistance(pt2, pt3)
  local pt3pt4 = GetDistance(pt3, pt4)
  pt1Text = Polar2D(Polar2D(Cab.Wpt9, 0,  1), 90,  (LSD / 5))
  if BaseQuestion.DrawShelfPanel then
    DrawBox(Cab.Wpt9, pt2, pt3, pt4, Milling.LNShelfProfile .. "-Base")
    DrawWriter("(ID: " .. BOM.PID .. ") Base Cabinet Shelf", pt1Text, 0.35, Milling.LNPartLabels, 0.0)
    pt1Text = Polar2D(pt1Text, 270, 0.7)
    DrawWriter(BaseDim.MaterialThickness .." Plywood (" .. pt2pt3 .. " x " .. pt3pt4..")", pt1Text, 0.35, Milling.LNPartLabels, 0.0)
  end -- if end
if BOM.BaseShelfBOM then  -- run one time only
    CutListfileWriterItem(BOM.PID, "Cabinet Shelf", "Base", BaseQuestion.ShelfCount, BaseDim.MaterialThickness,    BOM.BaseCabinetMateralType, pt2pt3,  pt3pt4)
    CutListfileWriterItem(BOM.PID + 10, "Shelf Nose (Not Shown)", "Base", BaseQuestion.ShelfCount, BaseDim.ShelfNosingThickness, BOM.BaseCabinetMateralType, BaseDim.ShelfNosingWidth, pt3pt4)
    BOM.BaseShelfBOM = false
  end -- if end
  return true
end
-- =====================================================]]
function Base_CabinetToeandRunners()
--  ToeKick
  BOM.PID = BOM.PID + 10
  local pt1Text = Cab.Wpt4
  local pt2 = Polar2D(Cab.Wpt4, 0,  BaseDim.ToeKickCoverHeight)
  local pt3 = Polar2D(pt2, 90,  BaseDim.BackPanelLength )
  local pt4 = Polar2D(pt3, 180, BaseDim.ToeKickCoverHeight)
  if BaseQuestion.DrawTopToe then
    DrawBox(Cab.Wpt4, pt2, pt3, pt4, Milling.LNStretcherRailProfile .. "-Base")
    pt1Text = Polar2D(Cab.Wpt4, 45,  1.25)
    DrawWriter("(ID: " .. BOM.PID .. ") Toe Kick - ".. BaseDim.MaterialThickness .." " .. BOM.BaseCabinetMateralType .. "  (" .. GetDistance(pt2, pt3) .. " x " .. GetDistance(pt3, pt4)..")", pt1Text, 0.35,Milling.LNPartLabels, 90.0)
  end -- if end
  CutListfileWriterItem(BOM.PID, "Toe Kick", "Base", "1",  BaseDim.MaterialThickness, BOM.BaseCabinetMateralType, GetDistance(pt2, pt3), GetDistance(pt3, pt4))
  --  Top  1
  BOM.PID = BOM.PID + 10

       pt2 = Polar2D(Cab.Wpt5, 0.0,  BaseDim.TopFrameWidth)
       pt3 = Polar2D(pt2,     90.0,  BaseDim.BackPanelLength)
       pt4 = Polar2D(pt3,    180.0,  BaseDim.TopFrameWidth)
  if BaseQuestion.DrawTopToe then
    DrawBox(Cab.Wpt5, pt2, pt3, pt4, Milling.LNStretcherRailProfile .. "-Base")
    pt1Text = Polar2D(Cab.Wpt5, 45,  1.25)
    DrawWriter("(ID: " .. BOM.PID .. ") Top Stretcher - ".. BaseDim.MaterialThickness .." " .. BOM.BaseCabinetMateralType .. "  (" .. GetDistance(pt2, pt3) .. " x " .. GetDistance(pt3, pt4)..")", pt1Text, 0.35, Milling.LNPartLabels, 90.0)
  end -- if end
--  Top  2

  pt2 = Polar2D(Cab.Wpt6, 0, BaseDim.TopFrameWidth)
  pt3 = Polar2D(pt2, 90,  BaseDim.BackPanelLength )
  pt4 = Polar2D(pt3, 180, BaseDim.TopFrameWidth)
  if BaseQuestion.DrawTopToe then
    DrawBox(Cab.Wpt6, pt2, pt3, pt4, Milling.LNStretcherRailProfile .. "-Base")
    pt1Text = Polar2D(Cab.Wpt6, 45,  1.25)
    DrawWriter("(ID: " .. BOM.PID .. ")Top Stretcher  - ".. BaseDim.MaterialThickness .." " .. BOM.BaseCabinetMateralType .. "  (" .. GetDistance(pt2, pt3) .. " x " .. GetDistance(pt3, pt4)..")", pt1Text, 0.35, Milling.LNPartLabels, 90.0)
  end
  CutListfileWriterItem(BOM.PID, "Top Stretcher", "Base", "2", BaseDim.MaterialThickness, BOM.BaseCabinetMateralType, GetDistance(pt2, pt3), GetDistance(pt3, pt4))
--  Rail Stretcher
  if not BaseQuestion.AddCenterPanel then
    BOM.PID = BOM.PID + 10
    for i = BaseQuestion.DrawerRowCount, 1 , -1 do
      pt2 = Polar2D(Cab.Wpt7, 0,  BaseDim.StretcherWidth)
      pt3 = Polar2D(pt2, 90,  BaseDim.BackPanelLength )
      pt4 = Polar2D(pt3, 180, BaseDim.StretcherWidth)
      if BaseQuestion.DrawTopToe then
        DrawBox(Cab.Wpt7, pt2, pt3, pt4, Milling.LNStretcherRailProfile .. "-Base")
        pt1Text = Polar2D(Cab.Wpt7, 45,  1.25)
        pt1Text = Polar2D(pt1Text, 90,  0.75)
        pt1Text = Polar2D(Cab.Wpt7, 45,  1.25)
        DrawWriter("(ID: " .. BOM.PID .. ") Face Frame Stretcher " .. tostring(i) .. " - ".. BaseDim.StretcherThickness .." " .. BOM.BaseCabinetMateralType .. "  (" .. BaseDim.StretcherWidth .. " x " .. BaseDim.BackPanelLength..")", pt1Text, 0.35, Milling.LNPartLabels, 90.0)
      end -- if end
      pt2 = Polar2D(Cab.Wpt10, 0,  BaseDim.StretcherWidth)
      Cab.Wpt7 = Polar2D(Cab.Wpt7, 0, BaseDim.StretcherWidth + Milling.PartGap)
      Cab.Wpt8 = Polar2D(Cab.Wpt8, 0, BaseDim.StretcherWidth + Milling.PartGap)
    end -- for end
    CutListfileWriterItem(BOM.PID, "Face Frame Stretcher ", "Base", BaseQuestion.DrawerRowCount, BaseDim.StretcherThickness, BOM.BaseCabinetMateralType, BaseDim.StretcherWidth, BaseDim.BackPanelLength)
  end -- if end
  return true
end
-- =====================================================]]
function BaseValidater()
  local MyTrue = false
  if BaseDim.FaceFrameBottomRailWidth == 0 then
    MessageBox("Error: Base Face Frame Bottom Rail cannot be 0")
    OnLuaButton_InquiryBaseQuestion()
  elseif BaseDim.FaceFrameCenterStileWidth < BaseDim.MaterialThickness then
    MessageBox("Error: Base Center Stile Width cannot be less than Material Thickness")
    OnLuaButton_InquiryBaseQuestion()
  elseif BaseDim.FaceFrameMidRailWidth < BaseDim.MaterialThickness then
    MessageBox("Error: Base Face MidRail Width cannot be less than Material Thickness")
    OnLuaButton_InquiryBaseQuestion()
  elseif BaseDim.FaceFrameStileWidth < BaseDim.MaterialThickness then
    MessageBox("Error: Base Face Frame Stile Width cannot be less than Material Thickness")
    OnLuaButton_InquiryBaseQuestion()
  elseif BaseDim.FaceFrameThickness == 0 then
    MessageBox("Error: Base Face Frame Thickness cannot be 0")
    OnLuaButton_InquiryBaseQuestion()
  elseif BaseDim.FaceFrameTopRailWidth < BaseDim.MaterialThickness then
    MessageBox("Error: Base Top Rail Width cannot be less than Material Thickness")
    OnLuaButton_InquiryBaseQuestion()
  elseif BaseDim.FaceFrameDrawerHeight1 == 0 then
    MessageBox("Error: Base Face Frame Drawer Height1 cannot be 0")
    OnLuaButton_InquiryBaseQuestion()
  elseif BaseDim.FaceFrameDrawerHeight2 == 0 then
    MessageBox("Error: Base Face Frame Drawer Height2 cannot be 0")
    OnLuaButton_InquiryBaseQuestion()
  elseif BaseDim.FaceFrameDrawerHeight3 == 0 then
    MessageBox("Error: Base Face Frame Drawer Height3 cannot be 0")
    OnLuaButton_InquiryBaseQuestion()
  elseif BaseDim.ShelfNosingThickness == 0 then
    MessageBox("Error: Base Shelf Face Frame Thickness cannot be 0")
    OnLuaButton_InquiryBaseQuestion()
  elseif BaseDim.ShelfNosingWidth < BaseDim.ShelfMaterialThickness then
    MessageBox("Error: Base Shelf Face Frame Width cannot be less than Shelf Material Thickness")
    OnLuaButton_InquiryBaseQuestion()
  elseif BaseDim.ShelfHoleFirstRowSpacing < Milling.ShelfPinDiameter * 8 then
    MessageBox("Error: Base Shelf Hole First Row Spacing cannot be smaller than 8 x Shelf Pin Diameter")
    OnLuaButton_InquiryBaseQuestion()
  elseif BaseDim.ShelfHoleLastRowSpacing < Milling.ShelfPinDiameter * 8 then
    MessageBox("Error: Base Shelf Hole Last Row Spacing cannot be smaller than 8 x Shelf Pin Diameter")
    OnLuaButton_InquiryBaseQuestion()
  elseif BaseDim.ShelfHoleSpacing < Milling.ShelfPinDiameter * 4 then
    MessageBox("Error: Base Shelf Hole Spacing cannot be smaller than 4 x Shelf Pin Diameter")
    OnLuaButton_InquiryBaseQuestion()
  elseif BaseDim.ShelfMaterialThickness == 0 then
    MessageBox("Error: Base Face Frame Bottom Rail cannot be 0")
    OnLuaButton_InquiryBaseQuestion()
  elseif BaseDim.ShelfPinHoleBack < Milling.ShelfPinDiameter * 8 then
    MessageBox("Error: Base Shelf Material Thickness cannot be smaller than 8 x Shelf Pin Diameter")
    OnLuaButton_InquiryBaseQuestion()
  elseif BaseDim.ShelfPinHoleFront < Milling.ShelfPinDiameter * 8 then
    MessageBox("Error: Base Shelf Pin Hole Front cannot be smaller than 8 x Shelf Pin Diameter")
    OnLuaButton_InquiryBaseQuestion()
  elseif BaseDim.StretcherThickness  == 0 then
    MessageBox("Error: Base Stretcher Thickness cannot be 0")
    OnLuaButton_InquiryBaseQuestion()
  else
    MyTrue = true
  end -- if end
  return MyTrue
end -- if end