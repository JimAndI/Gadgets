-- ==============================================================================
--  Gadgets are an entirely optional add-in to Vectric's core software products.
--  They are provided 'as-is', without any express or implied warranty, and you
--  make use of them entirely at your own risk.
--  In no event will the author(s) or Vectric Ltd. be held liable for any damages
--  arising from their use.
--  Permission is granted to anyone to use this software for any purpose,
--  including commercial applications, and to alter it and redistribute it freely,
--  subject to the following restrictions:
--  1. The origin of this software must not be misrepresented;
--     you must not claim that you wrote the original software.
--     If you use this software in a product, an acknowledgement in the product
--     documentation would be appreciated but is not required.
--  2. Altered source versions must be plainly marked as such, and
--     must not be misrepresented as being the original software.
--  3. This notice may not be removed or altered from any source distribution.
-- ==============================================================================

-- ====================================================]]
function DoorSetUp(style)
  Door.HeightH = Door.Height * 0.5
  Door.WidthH  = Door.Width  * 0.5
  Door.CTR  = Point2D(Door.pt01.X + (Door.Width * 0.5), Door.pt01.Y + (Door.Height * 0.5)) -- Door Center
  Door.pt02 = Polar2D(Door.pt01,   0.0, Door.Width)
  Door.pt03 = Polar2D(Door.pt02,  90.0, Door.Height)
  Door.pt04 = Polar2D(Door.pt01,  90.0, Door.Height)
  DrawBox(Door.pt01, Door.pt02, Door.pt03, Door.pt04, Door.LayerOFrame)
  Door.Bctr = Polar2D(Door.CTR,  270.0, Door.HeightH) -- Bottom Outer Center
  Door.Tctr = Polar2D(Door.CTR,   90.0, Door.HeightH) -- Top Outer Center
  Door.Lctr = Polar2D(Door.CTR,  180.0, Door.WidthH) -- Left Outer Center
  Door.Rctr = Polar2D(Door.CTR,    0.0, Door.WidthH) -- Right Outer Center
  Door.CHR  = Polar2D(Door.CTR,    0.0, style.FluteSpacing) -- Left
  Door.CHT  = Polar2D(Door.CTR,   90.0, style.FluteSpacing) -- Top
  Door.CHL  = Polar2D(Door.CTR,  180.0, style.FluteSpacing) -- Left
  Door.CHB  = Polar2D(Door.CTR,  270.0, style.FluteSpacing) -- Bottom
  return true
end -- function end
-- ==================================================]]
function DoorStyleA()                                  -- Draws a Shaker Style Door
  DoorSetUp(StyleA)
  Door.ptT  = Polar2D(Door.CTR,   90.0, Door.HeightH - (StyleA.B + Door.BitRad)) -- Top
  Door.ptB  = Polar2D(Door.CTR,  270.0, Door.HeightH - (StyleA.B + Door.BitRad)) -- Bottom
  Door.ptR  = Polar2D(Door.CTR,    0.0, Door.WidthH  - (StyleA.A + Door.BitRad)) -- Right
  Door.ptL  = Polar2D(Door.CTR,  180.0, Door.WidthH  - (StyleA.A + Door.BitRad)) -- Left
  Door.VDist = GetDistance(Door.ptT, Door.ptB)
  Door.HDist = GetDistance(Door.ptR, Door.ptL)
  Door.VDistH = (Door.VDist * 0.5)
  Door.HDistH = (Door.HDist * 0.5)
  Door.ptTc = Polar2D(Door.ptT,   90.0, Door.BitRad) -- Top Rad Ctr
  Door.ptBc = Polar2D(Door.ptB,  270.0, Door.BitRad) -- Bottom Rad Ctr
  Door.ptRc = Polar2D(Door.ptR,    0.0, Door.BitRad) -- Right Rad Ctr
  Door.ptLc = Polar2D(Door.ptL,  180.0, Door.BitRad) -- Left Rad Ctr
  Door.pt05 = Polar2D(Polar2D(Door.pt01,   0.0, StyleA.A), 90.0, StyleA.B)
  Door.pt06 = Polar2D(Door.pt05,   0.0, (Door.Width - (StyleA.A * 2.0)))
  Door.pt07 = Polar2D(Door.pt06,  90.0, (Door.Height - (StyleA.B * 2.0)))
  Door.pt08 = Polar2D(Door.pt05,  90.0, (Door.Height - (StyleA.B * 2.0)))
  Door.pt05A = Polar2D(Door.pt05, 270.0, StyleA.B + Door.OverCut)
  Door.pt06A = Polar2D(Door.pt06, 270.0, StyleA.B + Door.OverCut)
  Door.pt07A = Polar2D(Door.pt07,  90.0, StyleA.B + Door.OverCut)
  Door.pt08A = Polar2D(Door.pt08,  90.0, StyleA.B + Door.OverCut)
  local WidthCheck = (Door.Width > (StyleA.A  * 2.0))
  local HeightCheck = (Door.Height > (StyleA.B * 2.0))
  if (WidthCheck) and (HeightCheck) then
    DrawBox(Door.pt05, Door.pt06, Door.pt07, Door.pt08, Door.LayerIFrame)
    if StyleA.Fluting == "Vertical" then
      DoorStyleAVertical()
    elseif StyleA.Fluting == "Horizontal" then
      DoorStyleAHorizontal()
    elseif StyleA.Fluting == "Crossing" then
      DoorStyleAHorizontal()
      DoorStyleAVertical()
    end -- if end
    if Door.ScribeLines == "Yes" then
      DrawLine(Door.pt05, Door.pt05A, Door.LayerScribeLines)
      DrawLine(Door.pt06A, Door.pt06, Door.LayerScribeLines)
      DrawLine(Door.pt07, Door.pt07A, Door.LayerScribeLines)
      DrawLine(Door.pt08A, Door.pt08, Door.LayerScribeLines)
    end -- if end
  else
    DrawLine(Door.ptT, Door.ptB, Door.LayerIFrame)
    LogWriter( "Error - Door: " .. Dubble2String(Door.Height) .. " X " .. Dubble2String(Door.Width) .. " Failed to Draw the inter panel")
  end
  RowPoint()
  return true
end -- function end
-- ====================================================]]
function DoorStyleAVertical()
  local fltCount = (GetDistance(Door.ptL, Door.ptR) / StyleA.FluteSpacing) - 1
  DrawLine(Door.ptT, Door.ptB, Door.LayerFlutes)
  if (1.0 < fltCount) then
    while fltCount > 1 do
      DrawLine(Polar2D(Door.CHR, 90.0, Door.VDistH), Polar2D(Door.CHR, 270.0, Door.VDistH), Door.LayerFlutes)
      DrawLine(Polar2D(Door.CHL, 90.0, Door.VDistH), Polar2D(Door.CHL, 270.0, Door.VDistH), Door.LayerFlutes)
      Door.CHR = Polar2D(Door.CHR,   0.0, StyleA.FluteSpacing)
      Door.CHL = Polar2D(Door.CHL, 180.0, StyleA.FluteSpacing)
      fltCount = fltCount - 2
    end -- while end
  else
    LogWriter( "Error - Door: " .. Dubble2String(Door.Height) .. " X " .. Dubble2String(Door.Width) .. " Failed to Draw the Vertical Flutes")
  end -- if end
  return true
end -- function end
-- ====================================================]]
function DoorStyleAHorizontal()
  local fltCount = (GetDistance(Door.ptT, Door.ptB) / StyleA.FluteSpacing) - 1
  DrawLine(Door.ptL, Door.ptR, Door.LayerFlutes)
  if (1.0 < fltCount) then
    while fltCount > 1 do
      DrawLine(Polar2D(Door.CHT, 0.0, Door.HDistH), Polar2D(Door.CHT, 180.0, Door.HDistH), Door.LayerFlutes)
      DrawLine(Polar2D(Door.CHB, 0.0, Door.HDistH), Polar2D(Door.CHB, 180.0, Door.HDistH), Door.LayerFlutes)
      Door.CHT = Polar2D(Door.CHT,  90.0, StyleA.FluteSpacing)
      Door.CHB = Polar2D(Door.CHB, 270.0, StyleA.FluteSpacing)
      fltCount = fltCount - 2
    end -- while end
  else
    LogWriter( "Error - Door: " .. Dubble2String(Door.Height) .. " X " .. Dubble2String(Door.Width) .. " Failed to Draw the Vertical Flutes")
  end -- if end
  return true
end -- function end
-- ====================================================]]
function DoorStyleB()                                  -- Draws a Cathedral Style Door
  DoorSetUp(StyleB)
  Door.ptT  = Polar2D(Door.CTR,   90.0, Door.HeightH - (StyleB.B + Door.BitRad)) -- Top
  Door.ptB  = Polar2D(Door.CTR,  270.0, Door.HeightH - (StyleB.C + Door.BitRad)) -- Bottom
  Door.ptR  = Polar2D(Door.CTR,    0.0, Door.WidthH - (StyleB.A + Door.BitRad)) -- Right
  Door.ptL  = Polar2D(Door.CTR,  180.0, Door.WidthH - (StyleB.A + Door.BitRad)) -- Left
  Door.VDist = GetDistance(Door.ptT, Door.ptB)
  Door.HDist = GetDistance(Door.ptR, Door.ptL)
  Door.VDistH = (Door.VDist * 0.5)
  Door.VDistHB = GetDistance(Door.CTR, Door.ptB)
  Door.VDistHT = GetDistance(Door.CTR, Door.ptT)
  Door.HDistH = (Door.HDist * 0.5)
  Door.ptTc = Polar2D(Door.ptT,   90.0, Door.BitRad) -- Top Rad Ctr
  Door.ptBc = Polar2D(Door.ptB,  270.0, Door.BitRad) -- Bottom Rad Ctr
  Door.ptRc = Polar2D(Door.ptR,    0.0, Door.BitRad) -- Right Rad Ctr
  Door.ptLc = Polar2D(Door.ptL,  180.0, Door.BitRad) -- Left Rad Ctr
  Door.pt05 = Polar2D(Polar2D(Door.pt01, 0.0, StyleB.A), 90.0, StyleB.C)
  Door.pt06 = Polar2D(Door.pt05,   0.0, (Door.Width - (StyleB.A * 2.0)))
  Door.pt07 = Polar2D(Door.pt06,  90.0, (Door.Height - (StyleB.B + StyleB.C)))
  Door.pt08 = Polar2D(Door.pt07, 180.0, StyleB.D)
  Door.pt10 = Polar2D(Door.pt05,  90.0, (Door.Height - (StyleB.B + StyleB.C)))
  Door.pt09 = Polar2D(Door.pt10,   0.0, StyleB.D)
  Door.pt11 = Polar2D(Door.Tctr, 270.0, StyleB.C)
  Door.pt12 = Polar2D(Door.pt11, 270.0, Door.BitRad)
  Door.pt05A = Polar2D(Door.pt05, 270.0, StyleB.C + Door.OverCut)
  Door.pt06A = Polar2D(Door.pt06, 270.0, StyleB.C + Door.OverCut)
  Door.pt07A = Polar2D(Door.pt07,  90.0, StyleB.B + Door.OverCut)
  Door.pt10A = Polar2D(Door.pt10,  90.0, StyleB.B + Door.OverCut)
  Door.Chor = GetDistance(Door.pt08, Door.pt09)
  Door.Seg = GetDistance(Door.ptTc, Door.pt11)
  Door.Rad = ChordSeg2Radius (Door.Chor, Door.Seg)
  Door.Seg = RadChord2Segment(Door.Rad, Door.Chor)
  local bulge =  Radius2Bulge (Door.pt09, Door.pt08, Door.Rad)
  local Flutes = true
  local WidthCheck = (Door.Width > (StyleB.A * 2.0))
  local ArchCheck1 = (Door.Width > (StyleB.A * 2.0) + (StyleB.D * 2.0))
  local ArchCheck2 = (Door.pt08.y + Door.Seg) == Door.pt11.y
  local HeightCheck = (Door.Height > (StyleB.A * 2.0))
  local RadCheck = Door.Rad * 2.0 > Door.Seg
  local LegCheck1 = (Door.pt08.x > Door.pt09.x)
  local LegCheck2 = (Door.pt05.y < Door.pt10.y)
  local LegCheck3 = (Door.CTR.y < Door.pt10.y)
  if (WidthCheck) and (HeightCheck) then
    if (RadCheck) and (ArchCheck1) and (ArchCheck2) and (LegCheck1) and (LegCheck2) and (LegCheck3) then
      Door.Arch = true
      local line = Contour(0.0)
      local layer = Door.job.LayerManager:GetLayerWithName(Door.LayerIFrame)
      line:AppendPoint(Door.pt05)
      line:LineTo(Door.pt06)
      line:LineTo(Door.pt07)
      line:LineTo(Door.pt08)
      line:ArcTo(Door.pt09, bulge)
      line:LineTo(Door.pt10)
      line:LineTo(Door.pt05)
      layer:AddObject(CreateCadContour(line), true)
    else
      Door.Arch = false
      if LegCheck2 then
      DrawBox(Door.pt05, Door.pt06, Door.pt07, Door.pt10, Door.LayerIFrame)
    else
      DrawLine(Door.ptL, Door.ptR, Door.LayerIFrame)
      Flutes = false
      end
      LogWriter( "Error - Door: " .. Dubble2String(Door.Height) .. " X " .. Dubble2String(Door.Width) .. " Failed to Draw the Arch panel")
    end
    if Door.ScribeLines == "Yes" then
      DrawLine(Door.pt05, Door.pt05A, Door.LayerScribeLines)
      DrawLine(Door.pt06A, Door.pt06, Door.LayerScribeLines)
      DrawLine(Door.pt07, Door.pt07A, Door.LayerScribeLines)
      DrawLine(Door.pt10A, Door.pt10, Door.LayerScribeLines)
    end -- if end
    Door.Rad = Door.Rad - Door.BitRad
    if Flutes then
      if StyleB.Fluting == "Vertical" then
        DoorStyleBVertical()
      elseif StyleB.Fluting == "Horizontal" then
        DoorStyleBHorizontal()
      elseif StyleB.Fluting == "Crossing" then
        DoorStyleBHorizontal()
        DoorStyleBVertical()
      end -- if end
    end
  else
    Door.Arch = false
    DrawLine(Door.ptL, Door.ptR, Door.LayerIFrame)
    LogWriter( "Error - Door: " .. Dubble2String(Door.Height) .. " X " .. Dubble2String(Door.Width) .. " Failed to Draw the inter panel")
  end -- if end
  RowPoint()
  return true
end -- function end
-- ====================================================]]
function DoorStyleBVertical()
  local fltCount = (Door.HDist / StyleB.FluteSpacing) - 1
  local Seg   = GetDistance(Door.pt12, Door.ptT)
  Door.Chord = RadSeg2Chord(Door.Rad, Seg)
  local chord = (StyleB.FluteSpacing * 2.0)
  local seq = Seg
  local LegCheck1 = (Door.CTR.y < Door.pt10.y)
  if Door.Arch then
    DrawLine(Door.pt12, Door.ptB, Door.LayerFlutes)
  else
    DrawLine(Door.ptT,  Door.ptB, Door.LayerFlutes)
  end
  if (1.0 < fltCount) and (LegCheck1) then
    while fltCount > 1 do
      if (chord < Door.Chord) and (Door.Arch) then
        seq = Seg - (Door.Rad - (0.5 * (math.sqrt((4.0 * Door.Rad^2) - chord^2))))
      else
        seq = 0.0
      end
      DrawLine(Polar2D(Door.CHR,  90.0, Door.VDistHT + seq), Polar2D(Door.CHR, 270.0, Door.VDistHB), Door.LayerFlutes)
      DrawLine(Polar2D(Door.CHL,  90.0, Door.VDistHT + seq), Polar2D(Door.CHL, 270.0, Door.VDistHB), Door.LayerFlutes)
      Door.CHR = Polar2D(Door.CHR,    0.0, StyleB.FluteSpacing) -- Right
      Door.CHL = Polar2D(Door.CHL,  180.0, StyleB.FluteSpacing) -- Left
      if Door.Arch then
        chord = chord + (StyleB.FluteSpacing * 2.0)
      end -- if end
      fltCount = fltCount - 2
    end -- while end
  else
    LogWriter( "Error - Door: " .. Dubble2String(Door.Height) .. " X " .. Dubble2String(Door.Width) .. " Failed to Draw the Vertical Fluting")
  end -- if end
  return true
end -- function end
-- ====================================================]]
function DoorStyleBHorizontal()
 local seg, chord
  Door.PanelCTR = Polar2D(Door.ptB, 90.0, (GetDistance(Door.ptT, Door.ptB) * 0.5))
  Door.CHT = Polar2D(Door.PanelCTR,  90.0, StyleB.FluteSpacing)
  Door.CHB = Polar2D(Door.PanelCTR, 270.0, StyleB.FluteSpacing)
  Door.ptLx = Polar2D(Door.PanelCTR, 180.0, Door.HDistH)
  Door.ptRx = Polar2D(Door.PanelCTR,   0.0, Door.HDistH)
  DrawLine(Door.ptLx, Door.ptRx, Door.LayerFlutes)
  local fltCount = (GetDistance(Door.ptT, Door.ptB) / StyleB.FluteSpacing) - 1
  if (1.0 < fltCount) then
    while fltCount > 1 do
      DrawLine(Polar2D(Door.CHT,  0.0, Door.HDistH), Polar2D(Door.CHT, 180.0, Door.HDistH), Door.LayerFlutes)
      DrawLine(Polar2D(Door.CHB,  0.0, Door.HDistH), Polar2D(Door.CHB, 180.0, Door.HDistH), Door.LayerFlutes)
      Door.CHT = Polar2D(Door.CHT,   90.0, StyleB.FluteSpacing) -- Move Up
      Door.CHB = Polar2D(Door.CHB,  270.0, StyleB.FluteSpacing) -- Move Down
      fltCount = fltCount - 2
    end -- while end
    if Door.Arch then
      local ArchCount = (GetDistance(Polar2D(Door.CHT,  270.0, StyleB.FluteSpacing), Door.pt12) / StyleB.FluteSpacing)
      seg = GetDistance(Door.CHT, Door.pt12)
      chord = RadSeg2Chord(Door.Rad, seg)
      while ArchCount > 1 do
        DrawLine(Polar2D(Door.CHT,  0.0, (chord * 0.5)), Polar2D(Door.CHT, 180.0, (chord * 0.5)), Door.LayerFlutes)
        Door.CHT = Polar2D(Door.CHT, 90.0, StyleB.FluteSpacing)
        seg = GetDistance(Door.CHT, Door.pt12)
        chord = RadSeg2Chord(Door.Rad, seg)
        ArchCount = ArchCount - 1.0
      end -- while end
    end -- if end
  else
    LogWriter( "Error - Door: " .. Dubble2String(Door.Height) .. " X " .. Dubble2String(Door.Width) .. " Failed to Draw the Horizontal Fluting")
  end -- if end
  return true
end -- function end
-- ====================================================]]
function DoorStyleC()                                  -- Draws a Double Cathedral Style Door
  DoorSetUp(StyleC)
  Door.ptT  = Polar2D(Door.CTR,   90.0, Door.HeightH - (StyleC.B + Door.BitRad)) -- Top
  Door.ptB  = Polar2D(Door.CTR,  270.0, Door.HeightH - (StyleC.B + Door.BitRad)) -- Bottom
  Door.ptR  = Polar2D(Door.CTR,    0.0, Door.WidthH - (StyleC.A + Door.BitRad)) -- Right
  Door.ptL  = Polar2D(Door.CTR,  180.0, Door.WidthH - (StyleC.A + Door.BitRad)) -- Left
  Door.VDist = GetDistance(Door.ptT, Door.ptB)
  Door.HDist = GetDistance(Door.ptR, Door.ptL)
  Door.VDistH = (Door.VDist * 0.5)
  Door.VDistHB = GetDistance(Door.CTR, Door.ptB)
  Door.VDistHT = GetDistance(Door.CTR, Door.ptT)
  Door.HDistH = (Door.HDist * 0.5)
  Door.ptTc = Polar2D(Door.ptT,   90.0, Door.BitRad) -- Top Rad Ctr
  Door.ptBc = Polar2D(Door.ptB,  270.0, Door.BitRad) -- Bottom Rad Ctr
  Door.ptRc = Polar2D(Door.ptR,    0.0, Door.BitRad) -- Right Rad Ctr
  Door.ptLc = Polar2D(Door.ptL,  180.0, Door.BitRad) -- Left Rad Ctr
  Door.pt05 = Polar2D(Polar2D(Door.pt01, 0.0, StyleC.A), 90.0, StyleC.B)
  Door.pt06 = Polar2D(Door.pt05,   0.0, (Door.Width - (StyleC.A * 2.0)))
  Door.pt07 = Polar2D(Door.pt06,  90.0, (Door.Height - (StyleC.B * 2.0)))
  Door.pt08 = Polar2D(Door.pt07, 180.0, StyleC.D)
  Door.pt10 = Polar2D(Door.pt05,  90.0, (Door.Height - (StyleC.B * 2.0)))
  Door.pt09 = Polar2D(Door.pt10,   0.0, StyleC.D)
  Door.pt11 = Polar2D(Door.Tctr, 270.0, StyleC.C)
  Door.pt12 = Polar2D(Door.pt11, 270.0, Door.BitRad)
  Door.pt13 = Polar2D(Door.pt09, 270.0, (Door.Height - (StyleC.B * 2.0)))
  Door.pt14 = Polar2D(Door.pt08, 270.0, (Door.Height - (StyleC.B * 2.0)))
  Door.pt15 = Polar2D(Door.Bctr,  90.0, StyleC.C)
  Door.pt16 = Polar2D(Door.pt15,  90.0, Door.BitRad)
  Door.pt05A = Polar2D(Door.pt05, 270.0, StyleC.B + Door.OverCut)
  Door.pt06A = Polar2D(Door.pt06, 270.0, StyleC.B + Door.OverCut)
  Door.pt07A = Polar2D(Door.pt07,  90.0, StyleC.B + Door.OverCut)
  Door.pt10A = Polar2D(Door.pt10,  90.0, StyleC.B + Door.OverCut)
  Door.Chor = GetDistance(Door.pt08, Door.pt09)
  Door.Seg = GetDistance(Door.ptTc, Door.pt11)
  Door.Rad = ChordSeg2Radius (Door.Chor, Door.Seg)
  Door.Seg = RadChord2Segment(Door.Rad, Door.Chor)
  local bulge =  Radius2Bulge (Door.pt09, Door.pt08, Door.Rad)
  local Flutes = true
  local WidthCheck = (Door.Width > (StyleC.A * 2.0))
  local ArchCheck1 = (Door.Width > (StyleC.A * 2.0) + (StyleC.D * 2.0))
  local ArchCheck2 = (Door.pt08.y + Door.Seg) == Door.pt11.y
  local HeightCheck = (Door.Height > (StyleC.A * 2.0))
  local RadCheck = Door.Rad * 2.0 > Door.Seg
  local LegCheck1 = (Door.pt08.x > Door.pt09.x)
  local LegCheck2 = (Door.pt05.y < Door.pt10.y)
  local LegCheck3 = (Door.CTR.y < Door.pt10.y)

  if (WidthCheck) and (HeightCheck) then
    if (RadCheck) and (ArchCheck1) and (ArchCheck2) and (LegCheck1) and (LegCheck2) and (LegCheck3) then
      Door.Arch = true
      local line = Contour(0.0)
      local layer = Door.job.LayerManager:GetLayerWithName(Door.LayerIFrame)
      line:AppendPoint(Door.pt05)
      line:LineTo(Door.pt13)
      line:ArcTo(Door.pt14, bulge)
      line:LineTo(Door.pt06)
      line:LineTo(Door.pt07)
      line:LineTo(Door.pt08)
      line:ArcTo(Door.pt09, bulge)
      line:LineTo(Door.pt10)
      line:LineTo(Door.pt05)
      layer:AddObject(CreateCadContour(line), true)
    else
      Door.Arch = false
      if LegCheck2 then
      DrawBox(Door.pt05, Door.pt06, Door.pt07, Door.pt10, Door.LayerIFrame)
    else
      DrawLine(Door.ptL, Door.ptR, Door.LayerIFrame)
      Flutes = false
      end
      LogWriter( "Error - Door: " .. Dubble2String(Door.Height) .. " X " .. Dubble2String(Door.Width) .. " Failed to Draw the Arch panel")
    end
    if Door.ScribeLines == "Yes" then
      DrawLine(Door.pt05, Door.pt05A, Door.LayerScribeLines)
      DrawLine(Door.pt06A, Door.pt06, Door.LayerScribeLines)
      DrawLine(Door.pt07, Door.pt07A, Door.LayerScribeLines)
      DrawLine(Door.pt10A, Door.pt10, Door.LayerScribeLines)
    end -- if end
    Door.Rad = Door.Rad - Door.BitRad
    if Flutes then
      if StyleC.Fluting == "Vertical" then
        DoorStyleCVertical()
      elseif StyleC.Fluting == "Horizontal" then
        DoorStyleCHorizontal()
      elseif StyleC.Fluting == "Crossing" then
        DoorStyleCHorizontal()
        DoorStyleCVertical()
      end -- if end
    end
  else
    Door.Arch = false
    DrawLine(Door.ptL, Door.ptR, Door.LayerIFrame)
    LogWriter( "Error - Door: " .. Dubble2String(Door.Height) .. " X " .. Dubble2String(Door.Width) .. " Failed to Draw the inter panel")
  end -- if end
  RowPoint()
  return true
end -- function end
-- ====================================================]]
function DoorStyleCVertical()
  local fltCount = (Door.HDist / StyleC.FluteSpacing) - 1
  local Seg   = GetDistance(Door.pt12, Door.ptT)
  Door.Chord = RadSeg2Chord(Door.Rad, Seg)
  local chord = (StyleC.FluteSpacing * 2.0)
  local seq = Seg
  local LegCheck1 = (Door.CTR.y < Door.pt10.y)
  if Door.Arch then
    DrawLine(Door.pt12, Door.pt16, Door.LayerFlutes)
  else
    DrawLine(Door.ptT,  Door.ptB, Door.LayerFlutes)
  end
  if (1.0 < fltCount) and (LegCheck1) then
    while fltCount > 1 do
      if (chord < Door.Chord) and (Door.Arch) then
        seq = Seg - (Door.Rad - (0.5 * (math.sqrt((4.0 * Door.Rad^2) - chord^2))))
      else
        seq = 0.0
      end
      DrawLine(Polar2D(Door.CHR,  90.0, Door.VDistHT + seq), Polar2D(Door.CHR, 270.0, Door.VDistHB + seq), Door.LayerFlutes)
      DrawLine(Polar2D(Door.CHL,  90.0, Door.VDistHT + seq), Polar2D(Door.CHL, 270.0, Door.VDistHB + seq), Door.LayerFlutes)
      Door.CHR = Polar2D(Door.CHR,    0.0, StyleC.FluteSpacing) -- Right
      Door.CHL = Polar2D(Door.CHL,  180.0, StyleC.FluteSpacing) -- Left
      if Door.Arch then
        chord = chord + (StyleC.FluteSpacing * 2.0)
      end -- if end
      fltCount = fltCount - 2
    end -- while end
  else
    LogWriter( "Error - Door: " .. Dubble2String(Door.Height) .. " X " .. Dubble2String(Door.Width) .. " Failed to Draw the Vertical Fluting")
  end -- if end
  return true
end -- function end
-- ====================================================]]
function DoorStyleCHorizontal()
 local seg, chord
  Door.PanelCTR = Polar2D(Door.ptB, 90.0, (GetDistance(Door.ptT, Door.ptB) * 0.5))
  Door.CHT = Polar2D(Door.PanelCTR,  90.0, StyleC.FluteSpacing)
  Door.CHB = Polar2D(Door.PanelCTR, 270.0, StyleC.FluteSpacing)
  Door.ptLx = Polar2D(Door.PanelCTR, 180.0, Door.HDistH)
  Door.ptRx = Polar2D(Door.PanelCTR,   0.0, Door.HDistH)
  DrawLine(Door.ptLx, Door.ptRx, Door.LayerFlutes)
  local fltCount = (GetDistance(Door.ptT, Door.ptB) / StyleC.FluteSpacing) - 1
  if (1.0 < fltCount) then
    while fltCount > 1 do
      DrawLine(Polar2D(Door.CHT,  0.0, Door.HDistH), Polar2D(Door.CHT, 180.0, Door.HDistH), Door.LayerFlutes)
      DrawLine(Polar2D(Door.CHB,  0.0, Door.HDistH), Polar2D(Door.CHB, 180.0, Door.HDistH), Door.LayerFlutes)
      Door.CHT = Polar2D(Door.CHT,   90.0, StyleC.FluteSpacing) -- Move Up
      Door.CHB = Polar2D(Door.CHB,  270.0, StyleC.FluteSpacing) -- Move Down
      fltCount = fltCount - 2
    end -- while end
    if Door.Arch then
      local ArchCount = (GetDistance(Polar2D(Door.CHT,  270.0, StyleC.FluteSpacing), Door.pt12) / StyleC.FluteSpacing)
      seg = GetDistance(Door.CHT, Door.pt12)
      chord = RadSeg2Chord(Door.Rad, seg)
      while ArchCount > 1 do
        DrawLine(Polar2D(Door.CHT,  0.0, (chord * 0.5)), Polar2D(Door.CHT, 180.0, (chord * 0.5)), Door.LayerFlutes)
        Door.CHT = Polar2D(Door.CHT, 90.0, StyleC.FluteSpacing)
        DrawLine(Polar2D(Door.CHB,  0.0, (chord * 0.5)), Polar2D(Door.CHB, 180.0, (chord * 0.5)), Door.LayerFlutes)
        Door.CHB = Polar2D(Door.CHB, 270.0, StyleC.FluteSpacing)
        seg = GetDistance(Door.CHT, Door.pt12)
        chord = RadSeg2Chord(Door.Rad, seg)
        ArchCount = ArchCount - 1.0
      end -- while end
    end -- if end
  else
    LogWriter( "Error - Door: " .. Dubble2String(Door.Height) .. " X " .. Dubble2String(Door.Width) .. " Failed to Draw the Horizontal Fluting")
  end -- if end
  return true
end -- function end
-- ====================================================]]
function DoorStyleE()                                 -- Draws a Arched Style Door
  DoorSetUp(StyleE)
  Door.ptT  = Polar2D(Door.CTR,   90.0, Door.HeightH - (StyleE.C + Door.BitRad)) -- Top
  Door.ptB  = Polar2D(Door.CTR,  270.0, Door.HeightH - (StyleE.C + Door.BitRad)) -- Bottom
  Door.ptR  = Polar2D(Door.CTR,    0.0, Door.WidthH  - (StyleE.A + Door.BitRad)) -- Right
  Door.ptL  = Polar2D(Door.CTR,  180.0, Door.WidthH  - (StyleE.A + Door.BitRad)) -- Left
  Door.VDist = GetDistance(Door.ptT, Door.ptB)
  Door.HDist = GetDistance(Door.ptR, Door.ptL)
  Door.VDistH = (Door.VDist * 0.5)
  Door.VDistHB = GetDistance(Door.CTR, Door.ptB)
  Door.VDistHT = GetDistance(Door.CTR, Door.ptT)
  Door.HDistH = (Door.HDist * 0.5)
  Door.ptTc = Polar2D(Door.ptT,   90.0, Door.BitRad) -- Top Rad Ctr
  Door.ptBc = Polar2D(Door.ptB,  270.0, Door.BitRad) -- Bottom Rad Ctr
  Door.ptRc = Polar2D(Door.ptR,    0.0, Door.BitRad) -- Right Rad Ctr
  Door.ptLc = Polar2D(Door.ptL,  180.0, Door.BitRad) -- Left Rad Ctr
  Door.pt05 = Polar2D(Polar2D(Door.pt01, 0.0, StyleE.A), 90.0, StyleE.C)
  Door.pt06 = Polar2D(Door.pt05,   0.0, (Door.Width  - (StyleE.A * 2.0)))
  Door.pt07 = Polar2D(Door.pt06,  90.0, (Door.Height - (StyleE.B + StyleE.C)))
  Door.pt08 = Polar2D(Door.pt05,  90.0, (Door.Height - (StyleE.B + StyleE.C)))
  Door.pt05A = Polar2D(Door.pt05, 270.0, StyleE.C + Door.OverCut)
  Door.pt06A = Polar2D(Door.pt06, 270.0, StyleE.C + Door.OverCut)
  Door.pt07A = Polar2D(Door.pt07,  90.0, StyleE.B + Door.OverCut)
  Door.pt08A = Polar2D(Door.pt08,  90.0, StyleE.B + Door.OverCut)
  Door.Chor = GetDistance(Door.pt07, Door.pt08)
  Door.Seg = StyleE.B - StyleE.C
  Door.Rad = ChordSeg2Radius (Door.Chor, Door.Seg)
  Door.Seg = RadChord2Segment(Door.Rad, Door.Chor)
  local bulge =  Radius2Bulge (Door.pt07, Door.pt08, ChordSeg2Radius (Door.Chor, Door.Seg))
  local Flutes = true
  local WidthCheck = (Door.Width > (StyleE.A * 2.0))
  local HeightCheck = (Door.Height > (StyleE.B + StyleE.C))
  local RadCheck1 = Door.Rad * 2.0 > Door.Seg
  local RadCheck2 =  (Door.pt04.y - StyleE.C) < (Door.pt07.y + Door.Seg) + (0.05 * Door.Cal)
  local SegCheck = (Door.Rad > (Door.ptT.y - Door.pt07.y))
  local LegCheck1 = (Door.pt05.x < Door.pt06.x)
  local LegCheck2 = (Door.pt05.y < Door.pt08.y)
 if (WidthCheck) and (HeightCheck) and (SegCheck) and (RadCheck2) then
    local line = Contour(0.0)
    local layer = Door.job.LayerManager:GetLayerWithName(Door.LayerIFrame)
    line:AppendPoint(Door.pt05)
    line:LineTo(Door.pt06)
    line:LineTo(Door.pt07)
    line:ArcTo(Door.pt08, bulge)
    line:LineTo(Door.pt05)
    layer:AddObject(CreateCadContour(line), true)
    Door.Rad = Door.Rad  - Door.BitRad
    if StyleE.Fluting == "Vertical" then
      DoorStyleEVertical()
    elseif StyleE.Fluting == "Horizontal" then
      DoorStyleEHorizontal()
    elseif StyleE.Fluting == "Crossing" then
      DoorStyleEHorizontal()
      DoorStyleEVertical()
    end -- if end
    if Door.ScribeLines == "Yes" then
      DrawLine(Door.pt05, Door.pt05A, Door.LayerScribeLines)
      DrawLine(Door.pt06A, Door.pt06, Door.LayerScribeLines)
      DrawLine(Door.pt07, Door.pt07A, Door.LayerScribeLines)
      DrawLine(Door.pt08A, Door.pt08, Door.LayerScribeLines)
    end -- if end
  else
    if  (LegCheck1) and (LegCheck2) then
      DrawBox(Door.pt05, Door.pt06, Door.pt07, Door.pt08, Door.LayerIFrame)
    else
      DrawLine(Door.ptL, Door.ptR, Door.LayerFlutes)
    end --if end
    LogWriter( "Error - Door: " .. Dubble2String(Door.Height) .. " X " .. Dubble2String(Door.Width) .. " Failed to Draw the inter panel")
  end -- if end
  RowPoint()
  return true
end -- function end
-- ====================================================]]
function DoorStyleEVertical()
  local fltCount = (Door.HDist / StyleE.FluteSpacing) - 1
  Door.Chord = StyleE.FluteSpacing * 2.0
  Door.Seg  = RadChord2Segment (Door.Rad, Door.Chord)
  local seq = Door.Seg
  DrawLine(Door.ptT, Door.ptB, Door.LayerFlutes)
  if (1.0 < fltCount)  then
    while fltCount > 1 do
      DrawLine(Polar2D(Door.CHR,  90.0, Door.VDistHT - Door.Seg), Polar2D(Door.CHR, 270.0, Door.VDistHB), Door.LayerFlutes)
      DrawLine(Polar2D(Door.CHL,  90.0, Door.VDistHT - Door.Seg), Polar2D(Door.CHL, 270.0, Door.VDistHB), Door.LayerFlutes)
      Door.CHR = Polar2D(Door.CHR,    0.0, StyleE.FluteSpacing) -- Right
      Door.CHL = Polar2D(Door.CHL,  180.0, StyleE.FluteSpacing) -- Left
      Door.Chord = Door.Chord + (StyleE.FluteSpacing * 2.0)
      Door.Seg  = RadChord2Segment (Door.Rad, Door.Chord)
      fltCount = fltCount - 2
    end -- while end
  else
    LogWriter( "Error - Door: " .. Dubble2String(Door.Height) .. " X " .. Dubble2String(Door.Width) .. " Failed to Draw the Vertical Fluting")
  end -- if end
  return true
end -- function end
-- ====================================================]]
function DoorStyleEHorizontal()
 local seg, chord
  Door.PanelCTR = Polar2D(Door.ptB, 90.0, (GetDistance(Door.ptT, Door.ptB) * 0.5))
  Door.CHT = Polar2D(Door.PanelCTR,  90.0, StyleE.FluteSpacing)
  Door.CHB = Polar2D(Door.PanelCTR, 270.0, StyleE.FluteSpacing)
  Door.ptLx = Polar2D(Door.PanelCTR, 180.0, Door.HDistH)
  Door.ptRx = Polar2D(Door.PanelCTR,   0.0, Door.HDistH)
  local LegCheck1 = (Door.ptL.y < Door.pt08.y)
  local fltCount1 = ((GetDistance(Door.ptT, Door.CTR) - RadChord2Segment(Door.Rad, GetDistance(Door.ptL, Door.ptR))) / StyleE.FluteSpacing)
  local fltCount2 = (GetDistance(Door.CTR, Door.ptB) / StyleE.FluteSpacing)
  if LegCheck1 then
    DrawLine(Door.ptLx, Door.ptRx, Door.LayerFlutes)
    if (1.0 < fltCount1 + fltCount2) and (LegCheck1) then
      while fltCount2 > 1 do
        DrawLine(Polar2D(Door.CHB,  0.0, Door.HDistH), Polar2D(Door.CHB, 180.0, Door.HDistH), Door.LayerFlutes)
        Door.CHB = Polar2D(Door.CHB,  270.0, StyleE.FluteSpacing) -- Move Down
        fltCount2 = fltCount2 - 1
      end -- while end
      while fltCount1 > 1 do
        DrawLine(Polar2D(Door.CHT,  0.0, Door.HDistH), Polar2D(Door.CHT, 180.0, Door.HDistH), Door.LayerFlutes)
        Door.CHT = Polar2D(Door.CHT,   90.0, StyleE.FluteSpacing) -- Move Up
        fltCount1 = fltCount1 - 1
      end -- while end
      local ArchCount = (GetDistance(Polar2D(Door.CHT,  270.0, StyleE.FluteSpacing), Door.ptT) / StyleE.FluteSpacing)
      seg = GetDistance(Door.CHT, Door.ptT)
      chord = RadSeg2Chord(Door.Rad, seg)
      while ArchCount > 1 do
        DrawLine(Polar2D(Door.CHT,  0.0, (chord * 0.5)), Polar2D(Door.CHT, 180.0, (chord * 0.5)), Door.LayerFlutes)
        Door.CHT = Polar2D(Door.CHT, 90.0, StyleE.FluteSpacing)
        seg = GetDistance(Door.CHT, Door.ptT)
        chord = RadSeg2Chord(Door.Rad, seg)
        ArchCount = ArchCount - 1.0
      end -- while end
    else
      LogWriter( "Error - Door: " .. Dubble2String(Door.Height) .. " X " .. Dubble2String(Door.Width) .. " Failed to Draw the Horizontal Fluting")
    end -- if end
    LogWriter( "Error - Door: " .. Dubble2String(Door.Height) .. " X " .. Dubble2String(Door.Width) .. " Failed to Draw the Horizontal Fluting")
  end -- if end
  return true
end -- function end
-- ====================================================]]
function DoorStyleF()                                 -- Draws a Arched Style Door
  DoorSetUp(StyleF)
  Door.ptT  = Polar2D(Door.CTR,   90.0, Door.HeightH - (StyleF.C + Door.BitRad)) -- Top
  Door.ptB  = Polar2D(Door.CTR,  270.0, Door.HeightH - (StyleF.C + Door.BitRad)) -- Bottom
  Door.ptR  = Polar2D(Door.CTR,    0.0, Door.WidthH  - (StyleF.A + Door.BitRad)) -- Right
  Door.ptL  = Polar2D(Door.CTR,  180.0, Door.WidthH  - (StyleF.A + Door.BitRad)) -- Left
  Door.VDist = GetDistance(Door.ptT, Door.ptB)
  Door.HDist = GetDistance(Door.ptR, Door.ptL)
  Door.VDistH = (Door.VDist * 0.5)
  Door.VDistHB = GetDistance(Door.CTR, Door.ptB)
  Door.VDistHT = GetDistance(Door.CTR, Door.ptT)
  Door.HDistH = (Door.HDist * 0.5)
  Door.ptTc = Polar2D(Door.ptT,   90.0, Door.BitRad) -- Top Rad Ctr
  Door.ptBc = Polar2D(Door.ptB,  270.0, Door.BitRad) -- Bottom Rad Ctr
  Door.ptRc = Polar2D(Door.ptR,    0.0, Door.BitRad) -- Right Rad Ctr
  Door.ptLc = Polar2D(Door.ptL,  180.0, Door.BitRad) -- Left Rad Ctr
  Door.pt05 = Polar2D(Polar2D(Door.pt01, 0.0, StyleF.A), 90.0, StyleF.B )
  Door.pt06 = Polar2D(Door.pt05,   0.0, (Door.Width  - (StyleF.A * 2.0)))
  Door.pt07 = Polar2D(Door.pt06,  90.0, (Door.Height - (StyleF.B + StyleF.B )))
  Door.pt08 = Polar2D(Door.pt05,  90.0, (Door.Height - (StyleF.B + StyleF.B )))
  Door.pt05A = Polar2D(Door.pt05, 270.0, StyleF.B + Door.OverCut)
  Door.pt06A = Polar2D(Door.pt06, 270.0, StyleF.B + Door.OverCut)
  Door.pt07A = Polar2D(Door.pt07,  90.0, StyleF.B + Door.OverCut)
  Door.pt08A = Polar2D(Door.pt08,  90.0, StyleF.B + Door.OverCut)
  Door.Chor = GetDistance(Door.pt07, Door.pt08)
  Door.Seg = StyleF.B - StyleF.C
  Door.Rad = ChordSeg2Radius (Door.Chor, Door.Seg)
  Door.Seg = RadChord2Segment(Door.Rad, Door.Chor)
  local bulge =  Radius2Bulge (Door.pt07, Door.pt08, ChordSeg2Radius(Door.Chor, Door.Seg))
  local Flutes = true
  local WidthCheck = (Door.Width > (StyleF.A * 2.0))
  local HeightCheck = (Door.Height > (StyleF.B + StyleF.C))
  local RadCheck1 = Door.Rad * 2.0 > Door.Seg
  local RadCheck2 =  (Door.pt04.y - StyleF.C) == (Door.pt07.y + Door.Seg)
  local SegCheck = (Door.Rad > (Door.ptT.y - Door.pt07.y))
  local LegCheck1 = (Door.pt05.x < Door.pt06.x)
  local LegCheck2 = (Door.pt05.y < Door.pt08.y)
  if (RadCheck1) and (RadCheck2) and (WidthCheck) and (HeightCheck) and (SegCheck) and (LegCheck1) and (LegCheck2) then
    local line = Contour(0.0)
    local layer = Door.job.LayerManager:GetLayerWithName(Door.LayerIFrame)
    line:AppendPoint(Door.pt05)
    line:ArcTo(Door.pt06, bulge)
    line:LineTo(Door.pt07)
    line:ArcTo(Door.pt08, bulge)
    line:LineTo(Door.pt05)
    layer:AddObject(CreateCadContour(line), true)
    Door.Rad = Door.Rad  - Door.BitRad
    if StyleF.Fluting == "Vertical" then
      DoorStyleFVertical()
    elseif StyleF.Fluting == "Horizontal" then
      DoorStyleFHorizontal()
    elseif StyleF.Fluting == "Crossing" then
      DoorStyleFHorizontal()
      DoorStyleFVertical()
    end -- if end
    if Door.ScribeLines == "Yes" then
      DrawLine(Door.pt05, Door.pt05A, Door.LayerScribeLines)
      DrawLine(Door.pt06A, Door.pt06, Door.LayerScribeLines)
      DrawLine(Door.pt07, Door.pt07A, Door.LayerScribeLines)
      DrawLine(Door.pt08A, Door.pt08, Door.LayerScribeLines)
    end -- if end
  else
    if  (LegCheck1) and (LegCheck2) then
      DrawBox(Door.pt05, Door.pt06, Door.pt07, Door.pt08, Door.LayerIFrame)
    else
      DrawLine(Door.ptL, Door.ptR, Door.LayerFlutes)
    end --if end
    LogWriter( "Error - Door: " .. Dubble2String(Door.Height) .. " X " .. Dubble2String(Door.Width) .. " Failed to Draw the inter panel")
  end -- if end
  RowPoint()
  return true
end -- function end
-- ====================================================]]
function DoorStyleFVertical()
  local fltCount = (Door.HDist / StyleF.FluteSpacing) - 1
  Door.Chord = StyleF.FluteSpacing * 2.0
  Door.Seg  = RadChord2Segment (Door.Rad, Door.Chord)
  local seq = Door.Seg
  DrawLine(Door.ptT, Door.ptB, Door.LayerFlutes)
  if (1.0 < fltCount)  then
    while fltCount > 1 do
      DrawLine(Polar2D(Door.CHR,  90.0, Door.VDistHT - Door.Seg), Polar2D(Door.CHR, 270.0, Door.VDistHB - Door.Seg), Door.LayerFlutes)
      DrawLine(Polar2D(Door.CHL,  90.0, Door.VDistHT - Door.Seg), Polar2D(Door.CHL, 270.0, Door.VDistHB - Door.Seg), Door.LayerFlutes)
      Door.CHR = Polar2D(Door.CHR,    0.0, StyleF.FluteSpacing) -- Right
      Door.CHL = Polar2D(Door.CHL,  180.0, StyleF.FluteSpacing) -- Left
      Door.Chord = Door.Chord + (StyleF.FluteSpacing * 2.0)
      Door.Seg  = RadChord2Segment (Door.Rad, Door.Chord)
      fltCount = fltCount - 2
    end -- while end
  else
    LogWriter( "Error - Door: " .. Dubble2String(Door.Height) .. " X " .. Dubble2String(Door.Width) .. " Failed to Draw the Vertical Fluting")
  end -- if end
  return true
end -- function end
-- ====================================================]]
function DoorStyleFHorizontal()
 local seg, chord
  Door.PanelCTR = Polar2D(Door.ptB, 90.0, (GetDistance(Door.ptT, Door.ptB) * 0.5))
  Door.CHT = Polar2D(Door.PanelCTR,  90.0, StyleF.FluteSpacing)
  Door.CHB = Polar2D(Door.PanelCTR, 270.0, StyleF.FluteSpacing)
  Door.ptLx = Polar2D(Door.PanelCTR, 180.0, Door.HDistH)
  Door.ptRx = Polar2D(Door.PanelCTR,   0.0, Door.HDistH)
  local LegCheck1 = (Door.ptL.y < Door.pt08.y)
  local fltCount = ((GetDistance(Door.ptT, Door.CTR) - RadChord2Segment(Door.Rad, GetDistance(Door.ptL, Door.ptR))) / StyleF.FluteSpacing)
  if LegCheck1 then
    DrawLine(Door.ptLx, Door.ptRx, Door.LayerFlutes)
    if (1.0 < fltCount) and (LegCheck1) then
      while fltCount > 1 do
        DrawLine(Polar2D(Door.CHB,  0.0, Door.HDistH), Polar2D(Door.CHB, 180.0, Door.HDistH), Door.LayerFlutes)
        DrawLine(Polar2D(Door.CHT,  0.0, Door.HDistH), Polar2D(Door.CHT, 180.0, Door.HDistH), Door.LayerFlutes)
        Door.CHB = Polar2D(Door.CHB,  270.0, StyleF.FluteSpacing) -- Move Down
        Door.CHT = Polar2D(Door.CHT,   90.0, StyleF.FluteSpacing) -- Move Up
      fltCount = fltCount - 1
      end -- while end
      local ArchCount = (GetDistance(Polar2D(Door.CHT,  270.0, StyleF.FluteSpacing), Door.ptT) / StyleF.FluteSpacing)
      seg = GetDistance(Door.CHT, Door.ptT)
      chord = RadSeg2Chord(Door.Rad, seg)
      while ArchCount > 1 do
        DrawLine(Polar2D(Door.CHT,  0.0, (chord * 0.5)), Polar2D(Door.CHT, 180.0, (chord * 0.5)), Door.LayerFlutes)
        DrawLine(Polar2D(Door.CHB,  0.0, (chord * 0.5)), Polar2D(Door.CHB, 180.0, (chord * 0.5)), Door.LayerFlutes)
        Door.CHT = Polar2D(Door.CHT,  90.0, StyleF.FluteSpacing)
        Door.CHB = Polar2D(Door.CHB, 270.0, StyleF.FluteSpacing)
        seg = GetDistance(Door.CHT, Door.ptT)
        chord = RadSeg2Chord(Door.Rad, seg)
        ArchCount = ArchCount - 1.0
      end -- while end
    else
      LogWriter( "Error - Door: " .. Dubble2String(Door.Height) .. " X " .. Dubble2String(Door.Width) .. " Failed to Draw the Horizontal Fluting")
    end -- if end
    LogWriter( "Error - Door: " .. Dubble2String(Door.Height) .. " X " .. Dubble2String(Door.Width) .. " Failed to Draw the Horizontal Fluting")
  end -- if end
  return true
end -- function end
-- ====================================================]]
function DoorStyleG()                                  -- Draws a Corner Radius Style Door
  local pt2 = Polar2D(Door.pt01,   0.0, Door.Width)
  local pt3 = Polar2D(pt2,      90.0, Door.Height)
  local pt4 = Polar2D(Door.pt01,  90.0, Door.Height)
  DrawBox(Door.pt01, pt2, pt3, pt4, Door.LayerOFrame)
  local ptA = Polar2D(Polar2D(Door.pt01, 0.0, StyleG.A), 90.0, StyleG.B)
  local ptB = Polar2D(ptA,    0.0, (Door.Width - (StyleG.A * 2.0)))
  local ptC = Polar2D(ptB,   90.0, (Door.Height - (StyleG.B * 2.0)))
  local ptD = Polar2D(ptA,   90.0, (Door.Height - (StyleG.B * 2.0)))
  local pt5 = Polar2D(ptA,    0.0, StyleG.C)
  local pt6 = Polar2D(ptB,  180.0, StyleG.C)
  local pt7 = Polar2D(ptB,   90.0, StyleG.C)
  local pt8 = Polar2D(ptC,  270.0, StyleG.C)
  local pt9 = Polar2D(ptC,  180.0, StyleG.C)
  local pt10 = Polar2D(ptD,   0.0, StyleG.C)
  local pt11 = Polar2D(ptD, 270.0, StyleG.C)
  local pt12 = Polar2D(ptA,  90.0, StyleG.C)
  local pt05A = Polar2D(pt12, 270.0, StyleG.B + StyleG.C + Door.OverCut)
  local pt06A = Polar2D(pt7, 270.0, StyleG.B + StyleG.C + Door.OverCut)
  local pt07A = Polar2D(pt11,  90.0, StyleG.B + StyleG.C + Door.OverCut)
  local pt08A = Polar2D(pt8,  90.0, StyleG.B + StyleG.C + Door.OverCut)
  local chr = GetDistance(pt7, pt6)
  local bulge =  (Radius2Bulge (pt7, pt6, StyleG.C) * -1.0)
  if (Door.Width > (StyleG.A * 2.0) + (StyleG.C * 2.0)) and  (Door.Height > (StyleG.B * 2.0) + (StyleG.C * 2.0)) then
    if (Door.Width > (StyleG.A * 2.0) + (StyleG.C * 2.0)) then
      local line = Contour(0.0)
      local layer = Door.job.LayerManager:GetLayerWithName(Door.LayerIFrame)
      line:AppendPoint(pt5)
      line:LineTo(pt6)
      line:ArcTo(pt7, bulge)
      line:LineTo(pt8)
      line:ArcTo(pt9, bulge)
      line:LineTo(pt10)
      line:ArcTo(pt11, bulge)
      line:LineTo(pt12)
      line:ArcTo(pt5, bulge)
      layer:AddObject(CreateCadContour(line), true)
      if StyleG.Fluting == "Vertical" then
        DoorStyleGVertical(Door.pt01)
      elseif StyleG.Fluting == "Horizontal" then
        DoorStyleGHorizontal(Door.pt01, pt11, pt12, pt7, chr)
      elseif StyleG.Fluting == "Crossing" then
        DoorStyleGVertical(Door.pt01)
        DoorStyleGHorizontal(Door.pt01, pt11, pt12, pt7, chr)
      end -- if end
      if Door.ScribeLines == "Yes" then
        DrawLine(pt12, pt05A, Door.LayerScribeLines)
        DrawLine(pt06A, pt7, Door.LayerScribeLines)
        DrawLine(pt8, pt08A, Door.LayerScribeLines)
        DrawLine(pt07A, pt11,  Door.LayerScribeLines)
      end -- if end
    else
      DrawBox(pt5, pt6, pt7, pt8, Door.LayerIFrame)
      LogWriter( "Error - Door: " .. Dubble2String(Door.Height) .. " X " .. Dubble2String(Door.Width) .. " Failed to Draw the inter panel")
    end -- if end
  else
    LogWriter( "Error - Door: " .. Dubble2String(Door.Height) .. " X " .. Dubble2String(Door.Width) .. " Failed to Draw the inter panel")
  end -- if end
  RowPoint()
  return true
end -- function end
-- ====================================================]]
function DoorStyleGVertical(pt1)
  local Rad  = StyleG.C + Door.BitRad
  local ptX = Polar2D(pt1,    0.0, Door.Width * 0.5) -- Bottom
  local CTR = Polar2D(ptX,   90.0, Door.Height * 0.5) -- Door Center
  local ptT = Polar2D(CTR,   90.0, (Door.Height * 0.5) - (StyleG.B + Door.BitRad)) -- Top
  local ptB = Polar2D(CTR,  270.0, (Door.Height * 0.5) - (StyleG.B + Door.BitRad)) -- Bottom
  local ptR = Polar2D(CTR,    0.0, (Door.Width * 0.5)  - (StyleG.A + Door.BitRad)) -- Right
  local ptL = Polar2D(CTR,  180.0, (Door.Width * 0.5)  - (StyleG.A + Door.BitRad)) -- Left
  local ptTc = Polar2D(ptT,  90.0, Door.BitRad) -- Top Rad Ctr
  local ptBc = Polar2D(ptB, 270.0, Door.BitRad) -- Bottom Rad Ctr
  local ptRc = Polar2D(ptR,   0.0, Door.BitRad) -- Right Rad Ctr
  local ptLc = Polar2D(ptL, 180.0, Door.BitRad) -- Left Rad Ctr
  local Adj = Rad - math.sqrt(Rad^2 - Door.BitRad^2)
  local ptBl = Polar2D(ptB,   0.0, ((GetDistance(ptR, ptL) * 0.5) - StyleG.C) + Adj)
  local ptBr = Polar2D(ptB, 180.0, ((GetDistance(ptR, ptL) * 0.5) - StyleG.C) + Adj)
  local ptTl = Polar2D(ptT,   0.0, ((GetDistance(ptR, ptL) * 0.5) - StyleG.C) + Adj)
  local ptTr = Polar2D(ptT, 180.0, ((GetDistance(ptR, ptL) * 0.5) - StyleG.C) + Adj)
  local ptRl = Polar2D(ptR,   0.0, ((GetDistance(ptT, ptB) * 0.5) - StyleG.C) + Adj)
  local ptRr = Polar2D(ptR, 180.0, ((GetDistance(ptT, ptB) * 0.5) - StyleG.C) + Adj)
  local ptLl = Polar2D(ptL,   0.0, ((GetDistance(ptT, ptB) * 0.5) - StyleG.C) + Adj)
  local ptLr = Polar2D(ptL, 180.0, ((GetDistance(ptT, ptB) * 0.5) - StyleG.C) + Adj)
  local CHR = Polar2D(CTR,    0.0, StyleG.FluteSpacing) -- Left
  local CHL = Polar2D(CTR,  180.0, StyleG.FluteSpacing) -- Left
  local Vdis = GetDistance(ptT, ptB) * 0.5
  local Hdis = GetDistance(ptR, ptL) * 0.5
  local fltCount = (GetDistance(ptBl, ptBr) / StyleG.FluteSpacing) -1
  DrawLine(ptT, ptB, Door.LayerFlutes)
  CHR = Polar2D(CHR,  180.0, StyleG.FluteSpacing) -- Right
  CHL = Polar2D(CHL,    0.0, StyleG.FluteSpacing) -- Left
  if (1.0 < fltCount) then
    while fltCount > 1 do
      CHR = Polar2D(CHR,      0.0, StyleG.FluteSpacing) -- Right
      CHL = Polar2D(CHL,    180.0, StyleG.FluteSpacing) -- Left
      DrawLine(Polar2D(CHR,  90.0, Vdis), Polar2D(CHR, 270.0, Vdis), Door.LayerFlutes)
      DrawLine(Polar2D(CHL,  90.0, Vdis), Polar2D(CHL, 270.0, Vdis), Door.LayerFlutes)
      fltCount = fltCount - 2
    end -- while end
    local Adis = GetDistance(CHR, ptR)
           CHR = Polar2D(CHR,   0.0, StyleG.FluteSpacing) -- Next Step
           CHL = Polar2D(CHL, 180.0, StyleG.FluteSpacing) -- Next Step
    local Hchord = RadSeg2Chord(Rad, (Rad - GetDistance(CHR, ptRc))) * 0.5 - Door.BitRad
    local ArcCount = (GetDistance(CHR, ptR) / StyleG.FluteSpacing)
    if (ArcCount > 0.0) then
      while ArcCount > 0 do
        DrawLine(Polar2D(CHR, 90.0, Vdis - Hchord), Polar2D(CHR, 270.0, Vdis - Hchord ), Door.LayerFlutes)
        DrawLine(Polar2D(CHL, 90.0, Vdis - Hchord), Polar2D(CHL, 270.0, Vdis - Hchord),  Door.LayerFlutes)
        CHR = Polar2D(CHR,     0.0, StyleG.FluteSpacing) -- Right
        CHL = Polar2D(CHL,   180.0, StyleG.FluteSpacing) -- Left
        Hchord = RadSeg2Chord(Rad, (Rad - GetDistance(CHR, ptRc))) * 0.5 - Door.BitRad
        ArcCount = ArcCount - 1
      end -- while end
    end -- if end
  else
    LogWriter("Error - Door: " .. Dubble2String(Door.Height) .. " X " .. Dubble2String(Door.Width) .. " Failed to Draw the Vertical Fluting")
  end -- if end
  return true
end -- function end
-- ====================================================]]
function DoorStyleGHorizontal(pt1)
  local Rad  = StyleG.C + Door.BitRad
  local ptX  = Polar2D(pt1,    0.0, Door.Width * 0.5) -- Bottom
  local CTR  = Polar2D(ptX,   90.0, Door.Height * 0.5) -- Door Center
  local ptT  = Polar2D(CTR,   90.0, (Door.Height * 0.5) - (StyleG.B + Door.BitRad)) -- Top
  local ptB  = Polar2D(CTR,  270.0, (Door.Height * 0.5) - (StyleG.B + Door.BitRad)) -- Bottom
  local ptR  = Polar2D(CTR,    0.0, (Door.Width * 0.5)  - (StyleG.A + Door.BitRad)) -- Right
  local ptL  = Polar2D(CTR,  180.0, (Door.Width * 0.5)  - (StyleG.A + Door.BitRad)) -- Left
  local ptTc = Polar2D(ptT,  90.0, Door.BitRad) -- Top Rad Ctr
  local ptBc = Polar2D(ptB, 270.0, Door.BitRad) -- Bottom Rad Ctr
  local ptRc = Polar2D(ptR,   0.0, Door.BitRad) -- Right Rad Ctr
  local ptLc = Polar2D(ptL, 180.0, Door.BitRad) -- Left Rad Ctr
  local CHR  = Polar2D(CTR,    0.0, StyleG.FluteSpacing) -- Left
  local CHT  = Polar2D(CTR,   90.0, StyleG.FluteSpacing) -- Top
  local CHL  = Polar2D(CTR,  180.0, StyleG.FluteSpacing) -- Left
  local CHB  = Polar2D(CTR,  270.0, StyleG.FluteSpacing) -- Bottom
  local Adj  = Rad - math.sqrt(Rad^2 - Door.BitRad^2)
  local ptBl = Polar2D(ptB,   0.0, ((GetDistance(ptR, ptL) * 0.5) - StyleG.C) + Adj)
  local ptBr = Polar2D(ptB, 180.0, ((GetDistance(ptR, ptL) * 0.5) - StyleG.C) + Adj)
  local ptTl = Polar2D(ptT,   0.0, ((GetDistance(ptR, ptL) * 0.5) - StyleG.C) + Adj)
  local ptTr = Polar2D(ptT, 180.0, ((GetDistance(ptR, ptL) * 0.5) - StyleG.C) + Adj)
  local ptRl = Polar2D(ptR,   0.0, ((GetDistance(ptT, ptB) * 0.5) - StyleG.C) + Adj)
  local ptRr = Polar2D(ptR, 180.0, ((GetDistance(ptT, ptB) * 0.5) - StyleG.C) + Adj)
  local ptLl = Polar2D(ptL,   0.0, ((GetDistance(ptT, ptB) * 0.5) - StyleG.C) + Adj)
  local ptLr = Polar2D(ptL, 180.0, ((GetDistance(ptT, ptB) * 0.5) - StyleG.C) + Adj)
  local Vdis = GetDistance(ptT, ptB) * 0.5
  local Hdis = GetDistance(ptR, ptL) * 0.5
  local fltCount = (GetDistance(ptRl, ptRr) / StyleG.FluteSpacing) -1
  DrawLine(ptR, ptL, Door.LayerFlutes)
  CHT = Polar2D(CHT,  270.0, StyleG.FluteSpacing) -- Top SetBack
  CHB = Polar2D(CHB,   90.0, StyleG.FluteSpacing) -- Bottom SetBack
  if (1.0 < fltCount) then
    while fltCount > 1 do
      CHT = Polar2D(CHT,   90.0, StyleG.FluteSpacing) -- Move Up
      CHB = Polar2D(CHB,  270.0, StyleG.FluteSpacing) -- Move Down
      DrawLine(Polar2D(CHT,  0.0, Hdis), Polar2D(CHT, 180.0, Hdis), Door.LayerFlutes)
      DrawLine(Polar2D(CHB,  0.0, Hdis), Polar2D(CHB, 180.0, Hdis), Door.LayerFlutes)
      fltCount = fltCount - 2
    end -- while end
    local Adis = GetDistance(CHT, ptT)
           CHT = Polar2D(CHT,  90.0, StyleG.FluteSpacing) -- Next Step
           CHB = Polar2D(CHB, 270.0, StyleG.FluteSpacing) -- Next Step
    local Hchord = RadSeg2Chord(Rad, (Rad - GetDistance(CHT, ptTc))) * 0.5 - Door.BitRad
    local ArcCount = (GetDistance(CHT, ptT) / StyleG.FluteSpacing)
    local LineCheck = true
    if (1.0 < ArcCount) then
      while (ArcCount > 0) and (LineCheck) do
        LineCheck = (Polar2D(CHT, 0.0, Hdis - Hchord).x)  > (Polar2D(CHT, 180.0, Hdis - Hchord ).x)
        DrawLine(Polar2D(CHT, 0.0, Hdis - Hchord), Polar2D(CHT, 180.0, Hdis - Hchord ), Door.LayerFlutes)
        DrawLine(Polar2D(CHB, 0.0, Hdis - Hchord), Polar2D(CHB, 180.0, Hdis - Hchord),  Door.LayerFlutes)
        CHT = Polar2D(CHT,   90.0, StyleG.FluteSpacing) -- Right
        CHB = Polar2D(CHB,  270.0, StyleG.FluteSpacing) -- Left
        Hchord = RadSeg2Chord(Rad, (Rad - GetDistance(CHT, ptTc))) * 0.5 - Door.BitRad
        ArcCount = ArcCount - 1
      end -- while end
    end -- if end
  else
    LogWriter( "Error - Door: " .. Dubble2String(Door.Height) .. " X " .. Dubble2String(Door.Width) .. " Failed to Draw the Horizontal Fluting")
  end -- if end
  return true
end -- function end
-- ==================== End ===========================]]