-- ====================================================]]
function Base_Math()  --  All the math for Wall Cabinet
  BaseDim.BackPanelWidth       = BaseDim.CabHeight
  BaseDim.SidePanelWidth       = BaseDim.CabDepth - BaseDim.FaceFrameThickness
  BaseDim.SidePanelLength      = BaseDim.CabHeight
  BaseDim.TopBottomPanelWidth  = (BaseDim.CabDepth - BaseDim.FaceFrameThickness) - Milling.DadoBackHeight
  BaseDim.BackPanelLength      = BaseDim.CabLength - ( (Milling.DadoHeight  + BaseDim.FaceFrameSideReveal) * 2.0)
  BaseDim.TopBottomPanelLength = BaseDim.BackPanelLength
  BaseDim.FaceFrameStileLength = BaseDim.CabHeight  - BaseDim.ToeKickHeight
  BaseDim.FaceFrameRailLength  = BaseDim.CabLength - ( BaseDim.FaceFrameStileWidth * 2.0)
  BaseDim.ShelfWidth           = BaseDim.CabDepth - (BaseDim.ThicknessBack + BaseDim.FaceFrameThickness + BaseDim.ShelfFrontClearance )
  BaseDim.ToeKickCoverHeight   = ((BaseDim.ToeKickHeight + BaseDim.FaceFrameBottomRailWidth) - (BaseDim.FaceFrameBottomReveal + BaseDim.MaterialThickness + BaseDim.ToeKickBottomOffsetHeight ))
  Project.DrawerID     = StartDate()
  if BaseQuestion.DrawerRowCount > 3 then
    BaseQuestion.DrawerRowCount = 3
  end
  if BaseQuestion.AddCenterPanel then
    BaseDim.ShelfLength              = (BaseDim.CabLength - ((BaseDim.FaceFrameSideReveal * 2.0) + (BaseDim.MaterialThickness  * 3.0) + (BaseDim.ShelfEndClarence * 4.0)))* 0.5
    BaseDim.ShelfNoseLength          = BaseDim.ShelfLength
    BaseQuestion.NumberDrawersPerRow = 2
    BaseQuestion.AddCenterFaceFrame  = true
    BaseQuestion.AddStrecherPocket   = false
  else
    BaseDim.ShelfLength = (BaseDim.CabLength - (((BaseDim.MaterialThickness  + BaseDim.FaceFrameSideReveal) * 2.0) + (BaseDim.ShelfEndClarence * 2.0)))
    BaseDim.ShelfNoseLength  = BaseDim.ShelfLength
    BaseQuestion.NumberDrawersPerRow = 1
    BaseQuestion.AddCenterFaceFrame = false
    BaseQuestion.AddStrecherPocket = true
  end
  if BaseQuestion.DrawerRowCount == 3 then
    BaseDim.HoleDrop = BaseDim.ShelfHoleFirstRowSpacing + BaseDim.FaceFrameTopRailWidth + BaseDim.FaceFrameDrawerHeight1 + BaseDim.FaceFrameMidRailWidth + BaseDim.FaceFrameDrawerHeight2 + BaseDim.FaceFrameMidRailWidth + BaseDim.FaceFrameDrawerHeight3 + BaseDim.FaceFrameMidRailWidth

  elseif BaseQuestion.DrawerRowCount == 2 then
    BaseDim.HoleDrop = BaseDim.ShelfHoleFirstRowSpacing + BaseDim.FaceFrameTopRailWidth + BaseDim.FaceFrameDrawerHeight1 + BaseDim.FaceFrameMidRailWidth + BaseDim.FaceFrameDrawerHeight2 + BaseDim.FaceFrameMidRailWidth
  elseif BaseQuestion.DrawerRowCount == 1 then
    BaseDim.HoleDrop = BaseDim.ShelfHoleFirstRowSpacing + BaseDim.FaceFrameTopRailWidth + BaseDim.FaceFrameDrawerHeight1 + BaseDim.FaceFrameMidRailWidth
  else
    BaseDim.HoleDrop = BaseDim.ShelfHoleFirstRowSpacing + BaseDim.FaceFrameTopRailWidth + BaseDim.FaceFrameMidRailWidth
  end
  BaseDim.HoleSpace = BaseDim.SidePanelWidth - (BaseDim.ThicknessBack + BaseDim.ShelfPinHoleFront + BaseDim.ShelfPinHoleBack)
  BaseDim.HoleRows = ((BaseDim.CabDepth - (BaseDim.ShelfHoleFirstRowSpacing + BaseDim.ShelfHoleLastRowSpacing + (BaseDim.MaterialThickness * 2.0))) / BaseDim.ShelfHoleSpacing)
  BaseDim.CenterPanelLength = (BaseDim.SidePanelLength + Milling.DadoHeight) - (BaseDim.ToeKickCoverHeight + BaseDim.ToeKickBottomOffsetHeight + (BaseDim.MaterialThickness * 2.0))
  BaseDim.CenterPanelWidth =  BaseDim.TopBottomPanelWidth
  return true
end
-- ====================================================]]
function Base_CabinetBottom()
  local pt2 = Polar2D(Cab.Wpt6, 0, BaseDim.TopBottomPanelWidth)
  local ptC = Polar2D(Cab.Wpt6, 90, (BaseDim.TopBottomPanelLength * 0.5))
  local pt3 = Polar2D(pt2, 90, BaseDim.TopBottomPanelLength)
  local pt4 = Polar2D(pt3,  180, BaseDim.TopBottomPanelWidth)
  local ptW = Polar2D(Polar2D(ptC, 270, ((BaseDim.MaterialThickness + Milling.RabbitClearance) * 0.5)), 180, Milling.ProfileToolRadius)
  local ptX = Polar2D(ptW, 90, (BaseDim.MaterialThickness + Milling.RabbitClearance))
  local ptY = Polar2D(ptX,  0, BaseDim.TopBottomPanelWidth + (Milling.ProfileToolRadius * 2))
  local ptZ = Polar2D(ptW,  0, BaseDim.TopBottomPanelWidth + (Milling.ProfileToolRadius * 2))
--  local ptB = Cab.Wpt1
  local pt1Text = Cab.Wpt1
  local line = Contour(0.0)
  if BaseQuestion.AddCenterPanel then
    DrawBox(ptW, ptX, ptY, ptZ, Milling.LNTopBottomPocket .. "-Base")
    pt1Text = Polar2D(ptW, 340,  1.75 )
    DrawWriter("Dado - ".. WallDim.MaterialThickness .. " X " ..  Milling.DadoHeight , pt1Text, 0.35, Milling.LNPartLabels,  0.0)
    line = Contour(0.0)
  end
  DrawBox(Cab.Wpt6, pt2, pt3, pt4, Milling.LNTopBottomProfile .. "-Base")
  pt1Text = Polar2D(Cab.Wpt6, 45,  1.5)
  DrawWriter("Base Cabinet Bottom - ".. BaseDim.MaterialThickness .." Plywood  ( " .. GetDistance(pt2, pt3) .. " x " .. GetDistance(pt3, pt4).." )", pt1Text, 0.35, Milling.LNPartLabels, 0.0)
  CutListfileWriterItem("360", "Base Cabinet Bottom", "1", BaseDim.MaterialThickness, "Plywood", GetDistance(pt2, pt3), GetDistance(pt3, pt4))
  return true
end
-- ====================================================]]
function Base_CabinetFaceFrame()
  local Dist = 0.0
--  Draw outer frame box
  local pt2 = Polar2D(Cab.Wpt10, 0.0,  BaseDim.FaceFrameStileLength)
  local pt3 = Polar2D(pt2, 90.0,  BaseDim.FaceFrameRailLength+(BaseDim.FaceFrameStileWidth*2.0))
  local pt4 = Polar2D(pt3,  180.0,  BaseDim.FaceFrameStileLength)
  -- DrawBox(Cab.Wpt10, pt2, pt3, pt4, Milling.LNDrawFaceFrame .. "-Base")
  -- Draw Stile Lines
  local A1 = Polar2D(Cab.Wpt10, 90.0,  BaseDim.FaceFrameStileWidth)
  local B1 = Polar2D(pt2, 90.0,  BaseDim.FaceFrameStileWidth)
  local C1 = Polar2D(pt3,  270.0,  BaseDim.FaceFrameStileWidth)
  local D1 = Polar2D(pt4,  270.0,  BaseDim.FaceFrameStileWidth)
  DrawBox(Cab.Wpt10, pt2, B1, A1, Milling.LNDrawFaceFrame .. "-Base")
  local pt1Text = Polar2D(Cab.Wpt10, 5,  8.75 )
  DrawWriter("Part ID: 410", pt1Text, 0.40, Milling.LNPartLabels,  0.0)
  CutListfileWriterItem("410", "Face Frame Stile L", "1", BaseDim.FaceFrameThickness, "Hardwood", BaseDim.FaceFrameStileWidth, BaseDim.FaceFrameStileLength)
  DrawBox(D1, C1,pt3, pt4, Milling.LNDrawFaceFrame .. "-Base")
  pt1Text = Polar2D(pt4, 355,  8.75 )
  DrawWriter("Part ID: 420", pt1Text, 0.40, Milling.LNPartLabels,  0.0)
  CutListfileWriterItem("420", "Face Frame Stile R", "1", BaseDim.FaceFrameThickness, "Hardwood", BaseDim.FaceFrameStileWidth, BaseDim.FaceFrameStileLength)

--  Draw the Top and Bottom rails
  local A2 = Polar2D(A1, 0.0, BaseDim.FaceFrameTopRailWidth)
  local B2 = Polar2D(B1, 180.0, BaseDim.FaceFrameBottomRailWidth)
  local C2 = Polar2D(C1, 180.0, BaseDim.FaceFrameBottomRailWidth)
  local D2 = Polar2D(D1, 0.0, BaseDim.FaceFrameTopRailWidth)
  BaseDim.FaceFrameRailLength = GetDistance(A2, D2)
  local DrawerHeight  = 0.0
  CutListfileWriterItem("430", "Face Frame Top Rail", "1", BaseDim.FaceFrameThickness, "Hardwood", BaseDim.FaceFrameTopRailWidth, BaseDim.FaceFrameRailLength )
  --  Draw the Top rail
  DrawBox(A1, A2, D2, D1, Milling.LNDrawFaceFrame .. "-Base")

  pt1Text = Polar2D(A1, 85,  8.75 )
  DrawWriter("Part ID: 430", pt1Text, 0.40, Milling.LNPartLabels,  90.0)

  --  Draw the Bottom rail
  DrawBox(B2, B1, C1, C2, Milling.LNDrawFaceFrame .. "-Base")
  local B2x = B2
  local C2x = C2
  CutListfileWriterItem("440", "Face Frame Bottom Rail", "1", BaseDim.FaceFrameThickness, "Hardwood", BaseDim.FaceFrameBottomRailWidth, BaseDim.FaceFrameRailLength )
  pt1Text = Polar2D(B2, 85,  8.75 )
  DrawWriter("Part ID: 440", pt1Text, 0.40, Milling.LNPartLabels,  90.0)
  if BaseQuestion.DrawerRowCount >= 1 then
    local DrawerRowCountX = 1
    while DrawerRowCountX <= BaseQuestion.DrawerRowCount do
      if DrawerRowCountX == 3 then
        DrawerHeight = BaseDim.FaceFrameDrawerHeight3
      end
      if DrawerRowCountX == 2 then
        DrawerHeight = BaseDim.FaceFrameDrawerHeight2
      end
      if DrawerRowCountX == 1 then
        DrawerHeight = BaseDim.FaceFrameDrawerHeight1
      end
      A2 = Polar2D(A2,  0, DrawerHeight)
      D2 = Polar2D(D2,  0, DrawerHeight)
      B2 = Polar2D(A2,  0, BaseDim.FaceFrameMidRailWidth)
      C2 = Polar2D(D2,  0, BaseDim.FaceFrameMidRailWidth)
      DrawBox(A2, B2, C2, D2, Milling.LNDrawFaceFrame .. "-Base")
      CutListfileWriterItem("450", "Center Face Frame", "1", BaseDim.FaceFrameThickness, "Hardwood", BaseDim.FaceFrameCenterStileWidth, GetDistance(A2, D2) )
      pt1Text = Polar2D(A2, 85,  8.75 )
      DrawWriter("Part ID: 450", pt1Text, 0.40, Milling.LNPartLabels,  90.0)
      Dist = ((BaseDim.CabLength * 0.5) - (BaseDim.FaceFrameStileWidth + (BaseDim.FaceFrameCenterStileWidth * 0.5) ))
      local B2 = Polar2D(A2,  90, Dist)
      local B2a = Polar2D(B2, 180, DrawerHeight)
      local C2 = Polar2D(D2, 270, Dist)
      local C2a = Polar2D(C2, 180, DrawerHeight)
      if BaseQuestion.AddCenterFaceFrame then
        DrawBox(B2, B2a, C2a, C2, Milling.LNDrawFaceFrame .. "-Base")
        CutListfileWriterItem("460", "Center Face Frame", "1", BaseDim.FaceFrameThickness, "Hardwood", BaseDim.FaceFrameTopRailWidth, DrawerHeight)
        pt1Text = Polar2D(B2a, 25,  0.75 )
        DrawWriter("Part ID: 460", pt1Text, 0.4, Milling.LNPartLabels,  0.0)
      end
      A2 = Polar2D(A2,  0, BaseDim.FaceFrameMidRailWidth)
      D2 = Polar2D(D2,  0, BaseDim.FaceFrameMidRailWidth)
      DrawerRowCountX = DrawerRowCountX + 1
     -- CutListfileWriterItem("470", "Mid Rail Face Frame", "1", BaseDim.FaceFrameThickness, "Hardwood", BaseDim.FaceFrameMidRailWidth, GetDistance(A2, D2) )
    end
  end
  if BaseQuestion.AddCenterFaceFrame then
    Dist = ((BaseDim.CabLength * 0.5) - (BaseDim.FaceFrameStileWidth + (BaseDim.FaceFrameCenterStileWidth * 0.5) ))
    local A3 = Polar2D(A2,  90.0, Dist)
    local B3 = Polar2D(B2x,  90.0, Dist)
    local C3 = Polar2D(C2x, 270.0, Dist)
    local D3 = Polar2D(D2, 270.0, Dist)
    DrawBox(A3, D3, C3, B3, Milling.LNDrawFaceFrame .. "-Base")
    CutListfileWriterItem("470", "Center Face Frame", "1", BaseDim.FaceFrameThickness, "Hardwood", BaseDim.FaceFrameCenterStileWidth, GetDistance(A3, B3) )
    pt1Text = Polar2D(A3, 25,  0.75 )
    DrawWriter("Part ID: 470", pt1Text, 0.4, Milling.LNPartLabels,  0.0)
  end

  BaseDim.FaceFrameStileLength = BaseDim.CabHeight
  BaseDim.FaceFrameRailLength = BaseDim.CabLength - (BaseDim.FaceFrameStileWidth * 2.0)
  BaseDim.FaceFrameCenterStileLength = BaseDim.CabHeight - (BaseDim.FaceFrameBottomRailWidth + BaseDim.FaceFrameTopRailWidth)
  pt1Text = Polar2D(pt2, 0,  (BaseDim.FaceFrameStileWidth * 1.5))
  pt1Text = Polar2D(Cab.Wpt1, 90,  45.0)
  DrawWriter(Project.ProgramName, pt1Text, 1.250, Milling.LNDrawNotes, 0.0)
  pt1Text = Polar2D(pt1Text, 270, 1.25)
  DrawWriter("Cabinet ID: " .. Project.DrawerID, pt1Text, 0.750, Milling.LNDrawNotes, 0.0)
  pt1Text = Polar2D(pt1Text, 270,1)
  DrawWriter("Cabnet Name: " .. Project.CabinetName, pt1Text, 0.750, Milling.LNDrawNotes, 0.0)
  pt1Text = Polar2D(pt1Text, 270,1)
  DrawWriter("Version: " .. Project.ProgramVersion, pt1Text, 0.750, Milling.LNDrawNotes, 0.0)
  pt1Text = Polar2D(pt1Text, 270,1)
  DrawWriter("Gadget By: " .. Project.ProgramCodeBy, pt1Text, 0.750, Milling.LNDrawNotes, 0.0)
  return true
  end
-- ====================================================]]
function Base_CabinetShelf(CountX)
  if BaseQuestion.AddCenterPanel then
    BaseDim.PartLength = ((BaseDim.CabLength - (BaseDim.MaterialThickness * 2.0) - (BaseDim.ShelfEndClarence * 4.0)) * 0.5)
  else
    BaseDim.PartLength = (BaseDim.CabLength - (BaseDim.MaterialThickness * 2.0) - (BaseDim.ShelfEndClarence * 2))
  end
  local LSD = BaseDim.CabDepth - (BaseDim.ThicknessBack + BaseDim.FaceFrameThickness + BaseDim.ShelfFrontClearance)
  local pt2 = Polar2D(Cab.Wpt3, 0,  BaseDim.ShelfLength)
  local pt3 = Polar2D(pt2, 90,  LSD)
  local pt4 = Polar2D(pt3, 180, BaseDim.ShelfLength)
  DrawBox(Cab.Wpt3, pt2, pt3, pt4, Milling.LNShelfProfile .. "-Base")
  local pt1Text = Polar2D(Polar2D(Cab.Wpt3, 0,  1), 90,  (LSD / 5))
  DrawWriter("Base Cabinet Shelf No:" .. tostring(CountX), pt1Text, 0.35, Milling.LNPartLabels, 0.0)
  pt1Text = Polar2D(pt1Text, 270, 0.7)
  DrawWriter(BaseDim.MaterialThickness .." Plywood (" .. GetDistance(pt2, pt3) .. " x " .. GetDistance(pt3, pt4)..")", pt1Text, 0.35, Milling.LNPartLabels, 0.0)
  CutListfileWriterItem("330", "Base Cabinet Shelf No:" .. tostring(CountX), "1", BaseDim.MaterialThickness, "Plywood", GetDistance(pt2, pt3), GetDistance(pt3, pt4))
  CutListfileWriterItem("340", "Base Shelf Nose No:" .. tostring(CountX).. " (Not Shown)", "1", BaseDim.ShelfFaceFrameThickness, "Hardwood", BaseDim.ShelfFaceFrameWidth, GetDistance(pt3, pt4))
  return true
end
-- ====================================================]]
function Base_CabinetToeandRunners()

--  ToeKick
  local pt2 = Polar2D(Cab.Wpt9, 0,  BaseDim.ToeKickCoverHeight + BaseDim.ToeKickBottomOffsetHeight)
  local pt3 = Polar2D(pt2, 90,  BaseDim.BackPanelLength )
  local pt4 = Polar2D(pt3, 180, BaseDim.ToeKickCoverHeight + BaseDim.ToeKickBottomOffsetHeight)
  DrawBox(Cab.Wpt9, pt2, pt3, pt4, Milling.LNStretcherRailProfile .. "-Base")
  local pt1Text = Polar2D(Cab.Wpt9, 45,  1.25)
  DrawWriter("ToeKick - ".. BaseDim.MaterialThickness .." Plywood  (" .. GetDistance(pt2, pt3) .. " x " .. GetDistance(pt3, pt4)..")", pt1Text, 0.35,Milling.LNPartLabels, 90.0)
  CutListfileWriterItem("370", "ToeKick", "1", BaseDim.MaterialThickness, "Plywood", GetDistance(pt2, pt3), GetDistance(pt3, pt4))
  --  Top  1
  Cab.Wpt9 = Polar2D(pt2, 0.0,  Milling.PartGap)
  pt2 = Polar2D(Cab.Wpt9, 0.0,  BaseDim.TopFrameWidth)
  pt3 = Polar2D(pt2, 90.0,  BaseDim.BackPanelLength )
  pt4 = Polar2D(pt3, 180.0, BaseDim.TopFrameWidth)
  DrawBox(Cab.Wpt9, pt2, pt3, pt4, Milling.LNStretcherRailProfile .. "-Base")
  pt1Text = Polar2D(Cab.Wpt9, 45,  1.25)
  DrawWriter("Top Frame 1 - ".. BaseDim.MaterialThickness .." Plywood  (" .. GetDistance(pt2, pt3) .. " x " .. GetDistance(pt3, pt4)..")", pt1Text, 0.35, Milling.LNPartLabels, 90.0)
  CutListfileWriterItem("380", "Top Frame 1", "1", BaseDim.MaterialThickness, "Plywood", GetDistance(pt2, pt3), GetDistance(pt3, pt4))
--  Top  2
  Cab.Wpt9 = Polar2D(pt2, 0,  Milling.PartGap)
  pt2 = Polar2D(Cab.Wpt9, 0, BaseDim.TopFrameWidth)
  pt3 = Polar2D(pt2, 90,  BaseDim.BackPanelLength )
  pt4 = Polar2D(pt3, 180, BaseDim.TopFrameWidth)
  DrawBox(Cab.Wpt9, pt2, pt3, pt4, Milling.LNStretcherRailProfile .. "-Base")
  pt1Text = Polar2D(Cab.Wpt9, 45,  1.25)
  DrawWriter("Top Frame 2  - ".. BaseDim.MaterialThickness .." Plywood  (" .. GetDistance(pt2, pt3) .. " x " .. GetDistance(pt3, pt4)..")", pt1Text, 0.35, Milling.LNPartLabels, 90.0)
  CutListfileWriterItem("390", "Top Frame 2", "1", BaseDim.MaterialThickness, "Plywood", GetDistance(pt2, pt3), GetDistance(pt3, pt4))
--  Rail Stretcher
  if not BaseQuestion.AddCenterPanel then
    for i = BaseQuestion.DrawerRowCount, 1 , -1 do
      Cab.Wpt9 = Polar2D(pt2, 0,  Milling.PartGap)
      pt2 = Polar2D(Cab.Wpt9, 0,  BaseDim.StretcherWidth)
      pt3 = Polar2D(pt2, 90,  BaseDim.BackPanelLength )
      pt4 = Polar2D(pt3, 180, BaseDim.StretcherWidth)
      DrawBox(Cab.Wpt9, pt2, pt3, pt4, Milling.LNStretcherRailProfile .. "-Base")
      pt1Text = Polar2D(Cab.Wpt9, 45,  1.25)
      DrawWriter("Face Frame Stretcher " .. tostring(i) .. " - ".. BaseDim.StretcherThickness .." Plywood  (" .. GetDistance(pt2, pt3) .. " x " .. GetDistance(pt3, pt4)..")", pt1Text, 0.35, Milling.LNPartLabels, 90.0)
      CutListfileWriterItem("400", "Face Frame Stretcher " .. tostring(i), "1", BaseDim.StretcherThickness, "Plywood", GetDistance(pt2, pt3), GetDistance(pt3, pt4))
      pt2 = Polar2D(Cab.Wpt9, 0,  BaseDim.StretcherWidth)
    end
  end
  Cab.Wpt9 = Polar2D(pt2, 0,  Milling.PartGap)
  return true
end
-- ====================================================]]
function Base_CabinetBack()
  local pt2 = Polar2D(Cab.Wpt9, 0, BaseDim.BackPanelWidth)
  local ptC = Polar2D(Cab.Wpt9, 90, (BaseDim.BackPanelLength * 0.5))
  local pt3 = Polar2D(pt2, 90,  BaseDim.BackPanelLength )
  local pt4 = Polar2D(pt3, 180, BaseDim.BackPanelWidth)
  local ptW = Cab.Wpt9
  local ptX = Cab.Wpt9
  local ptY = Cab.Wpt9
  local ptZ = Cab.Wpt9
  ptW = Polar2D(ptC, 270, BaseDim.MaterialThickness  * 0.5)
  ptW = Polar2D(ptW, 180, Milling.PocketToolRadius)
  ptX = Polar2D(ptW, 90, BaseDim.MaterialThickness )
  ptY = Polar2D(ptX, 0,  BaseDim.BackPanelWidth  - (BaseDim.ToeKickCoverHeight + BaseDim.ToeKickBottomOffsetHeight ))
  ptZ = Polar2D(ptW, 0,  BaseDim.BackPanelWidth  - (BaseDim.ToeKickCoverHeight + BaseDim.ToeKickBottomOffsetHeight ))
--  Center Dado
  if BaseQuestion.AddCenterPanel then
     DrawBox(ptW, ptX, ptY, ptZ, Milling.LNBackPocket .. "-Base")
    local pt1Text = Polar2D(ptW, 340,  1.75 )
    DrawWriter("Dado - ".. WallDim.MaterialThickness .. " X " ..  Milling.DadoHeight , pt1Text, 0.35, Milling.LNPartLabels,  0.0)
  end
--  Bottom Dado
  local ptF = Polar2D(pt2, 180, BaseDim.ToeKickCoverHeight + BaseDim.ToeKickBottomOffsetHeight)
  ptF = Polar2D(ptF, 270, Milling.PocketToolRadius)
  local ptG = Polar2D(ptF, 180, BaseDim.MaterialThickness)
  local ptE = Polar2D(ptG, 90, BaseDim.BackPanelLength + Milling.PocketToolRadius)
  local ptH = Polar2D(ptF, 90, BaseDim.BackPanelLength + Milling.PocketToolRadius)
  DrawBox(ptF, ptG, ptE, ptH, Milling.LNBackPocket .. "-Base")
  local pt1Text = Polar2D(ptG, 60,  2.75 )
  DrawWriter("Dado - ".. WallDim.MaterialThickness .. " X " ..  Milling.DadoHeight , pt1Text, 0.35, Milling.LNPartLabels,  90.0)
--  Panel Profile
  DrawBox(Cab.Wpt9, pt2, pt3, pt4, Milling.LNBackProfile .. "-Base")
  pt1Text = Polar2D(Cab.Wpt9, 45,  1.5)
  DrawWriter("Base Cabinet Back - ".. BaseDim.ThicknessBack .." Plywood  (" .. GetDistance(pt2, pt3) .. " x " .. GetDistance(pt3, pt4)..")", pt1Text, 0.35, Milling.LNPartLabels, 0.0)
  CutListfileWriterItem("400", "Base Cabinet Back", "1", BaseDim.ThicknessBack, "Plywood", GetDistance(pt2, pt3), GetDistance(pt3, pt4))
  Cab.Wpt10 = Polar2D(pt2, 0,  Milling.PartGap)
  return true
end
-- ====================================================]]
function Base_CabinetSide(side)
  local ptA = Cab.Wpt1
  local ptB = Cab.Wpt1
  local ptL = Cab.Wpt1
  local ptG = Cab.Wpt1
  local ptH = Cab.Wpt1
  local ptI = Cab.Wpt1
  local ptJ = Cab.Wpt1
  local ptD = Cab.Wpt1
  local ptC = Cab.Wpt1
  local ptE = Cab.Wpt1
  local ptF = Cab.Wpt1
  local ptJA = Cab.Wpt1
  local ptJB = Cab.Wpt1
  local ptJC = Cab.Wpt1
  local ptK = Cab.Wpt1
        ptL = Cab.Wpt1
  local ptM = Cab.Wpt1
  local ptN = Cab.Wpt1
  local ptNA = Cab.Wpt1
  local ptNB = Cab.Wpt1
  local ptNC = Cab.Wpt1
  local ptO = Cab.Wpt1
  local ptP = Cab.Wpt1
  local ptS = Cab.Wpt1
  local ptSA = Cab.Wpt1
  local ptSB = Cab.Wpt1
  local ptSC = Cab.Wpt1
  local ptT = Cab.Wpt1
  local ptR = Cab.Wpt1
  local ptQ = Cab.Wpt1
  local pt1Text = Cab.Wpt1
  local pt2 = Cab.Wpt1
  local pt3 = Cab.Wpt1
  local pt4 = Cab.Wpt1
  local pt5 = Cab.Wpt1
  local pt6 = Cab.Wpt1
  local pt7 = Cab.Wpt1
  local layer = Milling.job.LayerManager:GetLayerWithName(Milling.LNSideProfile .. "-Base")
  local line = Contour(0.0)
  local  DrawerHeight = 0.0
  if side  ==  "R" then
    pt1Text = Polar2D(Cab.Wpt1, 45,  1.5)
    pt2 = Polar2D(Cab.Wpt1, 0, BaseDim.CabHeight)
    pt3 = Polar2D(pt2,  90, BaseDim.CabDepth - BaseDim.FaceFrameThickness )
    pt4 = Polar2D(pt3, 180, BaseDim.CabHeight)
    pt5 = Polar2D(pt3, 270, BaseDim.ToeKickDepth - BaseDim.MaterialThickness)
    pt6 = Polar2D(pt5, 180, BaseDim.ToeKickCoverHeight)
    pt7 = Polar2D(pt3, 180, BaseDim.ToeKickCoverHeight)
    line:AppendPoint(Cab.Wpt1)
    line:LineTo(pt2)
    line:LineTo(pt5)
    line:LineTo(pt6)
    line:LineTo(pt7)
    line:LineTo(pt4)
    line:LineTo(Cab.Wpt1)
    layer:AddObject(CreateCadContour(line), true)
--  Back Dado
    ptA = Polar2D(Cab.Wpt1,  90, BaseDim.ThicknessBack)
    ptD = Polar2D(ptA, 180, Milling.PocketToolRadius)
    ptA = Polar2D(ptD, 270, BaseDim.ThicknessBack + Milling.RabbitClearance)
    ptC = Polar2D(pt2, 90, BaseDim.ThicknessBack)
    ptC = Polar2D(ptC, 0, Milling.PocketToolRadius)
    ptB = Polar2D(ptC, 270, BaseDim.ThicknessBack + Milling.RabbitClearance)
    DrawBox(ptA, ptB, ptC, ptD, Milling.LNSidePocket .. "-Base")
    local pText = Polar2D(ptA, 4,  15.75 )
    DrawWriter("Rabbit - ".. WallDim.ThicknessBack .. " X " ..  Milling.DadoHeight , pText, 0.35, Milling.LNPartLabels,  0.0)
--  Bottom Dado
    ptF = Polar2D(pt2, 180, BaseDim.ToeKickCoverHeight + BaseDim.ToeKickBottomOffsetHeight)
    ptF = Polar2D(ptF, 270, Milling.PocketToolRadius)
    ptG = Polar2D(pt3, 180, BaseDim.ToeKickCoverHeight + BaseDim.ToeKickBottomOffsetHeight)
    ptG = Polar2D(ptG, 90, Milling.PocketToolRadius)
    ptE = Polar2D(ptF, 180, BaseDim.MaterialThickness)
    ptH = Polar2D(ptG, 180, BaseDim.MaterialThickness)
    DrawBox(ptF, ptG, ptH, ptE, Milling.LNSidePocket .. "-Base")
    pText = Polar2D(ptE, 100,  2.75 )
    DrawWriter("Dado - ".. WallDim.MaterialThickness .. " X " ..  Milling.DadoHeight , pText, 0.35, Milling.LNPartLabels,  90.0)
--  Top Frame Back Dado
    layer = Milling.job.LayerManager:GetLayerWithName(Milling.LNSidePocket .. "-Base")
    ptO = Polar2D(Cab.Wpt1,  90, BaseDim.ThicknessBack)
    ptO = Polar2D(ptO,  0, BaseDim.MaterialThickness)
    ptN = Polar2D(ptO, 90, BaseDim.TopFrameWidth)
    ptNA = Polar2D(ptN, 90, Milling.PocketToolRadius)
    ptNB = Polar2D(ptNA, 180, Milling.PocketToolDia + Milling.DadoClearance)
    ptNC = Polar2D(ptNB, 270, Milling.PocketToolRadius)
    ptM = Polar2D(ptN, 180, BaseDim.MaterialThickness + Milling.RabbitClearance)
    ptO = Polar2D(ptO, 270, Milling.RabbitClearance + BaseDim.ThicknessBack + Milling.PocketToolRadius)
    ptP = Polar2D(ptO, 180, BaseDim.MaterialThickness + Milling.RabbitClearance)
    line = Contour(0.0)
    line:AppendPoint(ptO)
    line:LineTo(ptNA)
    line:LineTo(ptNB)
    line:LineTo(ptNC)
    line:LineTo(ptM)
    line:LineTo(ptP)
    line:LineTo(ptO)
    layer:AddObject(CreateCadContour(line), true)
--  Top Frame Front Dado
    ptI = Polar2D(pt4,  0.0, BaseDim.MaterialThickness)
    ptJ = Polar2D(ptI, 270.0, BaseDim.TopFrameWidth)
    ptJA = Polar2D(ptJ,  270.0, Milling.PocketToolRadius)
    ptJB = Polar2D(ptJA, 180.0, Milling.ProfileToolDia + Milling.DadoClearance)
    ptJC = Polar2D(ptJB,  90.0, Milling.PocketToolRadius)
    ptI = Polar2D(ptI, 90.0, Milling.RabbitClearance)
    ptK = Polar2D(ptJ, 180.0, BaseDim.MaterialThickness + Milling.RabbitClearance)
    ptL = Polar2D(ptI, 180.0, BaseDim.MaterialThickness + Milling.RabbitClearance)
    line = Contour(0.0)
    line:AppendPoint(ptI)
    line:LineTo(ptJA)
    line:LineTo(ptJB)
    line:LineTo(ptJC)
    line:LineTo(ptK)
    line:LineTo(ptL)
    line:LineTo(ptI)
    layer:AddObject(CreateCadContour(line), true)
--  Toe Front Dado
    ptR = Polar2D(pt5, 270.0, BaseDim.MaterialThickness)
    ptS = Polar2D(ptR, 180.0, BaseDim.ToeKickCoverHeight)
    ptSA = Polar2D(ptS, 180.0, Milling.PocketToolRadius + BaseDim.ToeKickBottomOffsetHeight)
    ptSB = Polar2D(ptSA, 90.0, BaseDim.MaterialThickness + Milling.DadoClearance)
    ptSC = Polar2D(ptS, 90.0, BaseDim.MaterialThickness + Milling.DadoClearance)
    ptR = Polar2D(ptR, 0.0, Milling.RabbitClearance)
    ptQ = Polar2D(ptR, 90.0, BaseDim.MaterialThickness + Milling.RabbitClearance)
    ptT = Polar2D(ptS, 90.0, BaseDim.MaterialThickness + Milling.RabbitClearance)
    line = Contour(0.0)
    line:AppendPoint(ptR)
    line:LineTo(ptSA)
    line:LineTo(ptSB)
    line:LineTo(ptSC)
    line:LineTo(ptT)
    line:LineTo(ptQ)
    line:LineTo(ptR)
    layer:AddObject(CreateCadContour(line), true)
    if BaseQuestion.AddStrecherPocket then
      if BaseQuestion.DrawerRowCount >= 1 then
        local AX = pt4
        local DrawerRowCountX = 1
        while DrawerRowCountX <= BaseQuestion.DrawerRowCount do
          if DrawerRowCountX == 3 then
            DrawerHeight = BaseDim.FaceFrameDrawerHeight3 + BaseDim.FaceFrameMidRailWidth + (BaseDim.FaceFrameMidRailWidth * 0.5)
          end
          if DrawerRowCountX ==2 then
            DrawerHeight = BaseDim.FaceFrameDrawerHeight2 + BaseDim.FaceFrameMidRailWidth + (BaseDim.FaceFrameMidRailWidth * 0.5)
          end
          if DrawerRowCountX == 1 then
            DrawerHeight = BaseDim.FaceFrameDrawerHeight1 + BaseDim.FaceFrameTopRailWidth + (BaseDim.FaceFrameMidRailWidth * 0.5)
          end
          AX = Polar2D(AX,  0.0, DrawerHeight)
          Base_StrecherPocket(AX, 270)
          DrawerRowCountX = DrawerRowCountX+1
        end
      end
    end
    DrawWriter("Base Cabinet Right Side - ".. BaseDim.MaterialThickness .." Plywood  ( " .. GetDistance(pt2, pt3) .. " x " .. GetDistance(pt3, pt4).." )", pt1Text, 0.35000, Milling.LNPartLabels, 0.0)
    CutListfileWriterItem("310", "Base Cabinet Right Side", "1", BaseDim.MaterialThickness, "Plywood", GetDistance(pt2, pt3), GetDistance(pt3, pt4))
-- ====================================================]]
  else --  side  ==  "L"
-- ====================================================]]
    pt1Text = Polar2D(Cab.Wpt2, 45,  1.5)
    pt2 = Polar2D(Cab.Wpt2, 0, BaseDim.CabHeight)
    pt3 = Polar2D(pt2,  90, BaseDim.CabDepth - BaseDim.FaceFrameThickness)
    pt4 = Polar2D(pt3, 180, BaseDim.CabHeight)
    pt5 = Polar2D(pt2, 90, BaseDim.ToeKickDepth - BaseDim.MaterialThickness)
    pt6 = Polar2D(pt5, 180, BaseDim.ToeKickCoverHeight)
    pt7 = Polar2D(pt2, 180, BaseDim.ToeKickCoverHeight)
    line:AppendPoint(Cab.Wpt2)
    line:LineTo(pt7)
    line:LineTo(pt6)
    line:LineTo(pt5)
    line:LineTo(pt3)
    line:LineTo(pt4)
    line:LineTo(Cab.Wpt2)
    layer:AddObject(CreateCadContour(line), true)
--  Back Dado
    ptA = Polar2D(pt4, 270, BaseDim.ThicknessBack)
    ptA = Polar2D(ptA, 180, Milling.PocketToolRadius)
    ptD = Polar2D(ptA, 90, BaseDim.ThicknessBack + Milling.RabbitClearance)
    ptB = Polar2D(pt3, 270, BaseDim.ThicknessBack)
    ptB = Polar2D(ptB,  0, Milling.PocketToolRadius)
    ptC = Polar2D(ptB, 90, BaseDim.ThicknessBack + Milling.RabbitClearance)
    DrawBox(ptA, ptB, ptC, ptD, Milling.LNSidePocket .. "-Base")
    local pText = Polar2D(ptA, 350,  2.75 )
    DrawWriter("Rabbit - ".. WallDim.ThicknessBack .. " X " ..  Milling.DadoHeight , pText, 0.35, Milling.LNPartLabels,  0.0)
--  Bottom Dado
    ptF = Polar2D(pt2, 180, BaseDim.ToeKickCoverHeight + BaseDim.ToeKickBottomOffsetHeight)
    ptF = Polar2D(ptF, 270, Milling.PocketToolRadius)
    ptG = Polar2D(pt3, 180, BaseDim.ToeKickCoverHeight + BaseDim.ToeKickBottomOffsetHeight)
    ptG = Polar2D(ptG, 90, Milling.PocketToolRadius)
    ptE = Polar2D(ptF, 180, BaseDim.MaterialThickness)
    ptH = Polar2D(ptG, 180, BaseDim.MaterialThickness)
    DrawBox(ptF, ptG, ptH, ptE, Milling.LNSidePocket .. "-Base")
    pText = Polar2D(ptF, 120,  2.75 )
    DrawWriter("Dado - ".. WallDim.MaterialThickness .. " X " ..  Milling.DadoHeight , pText, 0.35, Milling.LNPartLabels,  90.0)
--  Top Frame Front Dado
    layer = Milling.job.LayerManager:GetLayerWithName(Milling.LNSidePocket .. "-Base")
    ptO = Polar2D(Cab.Wpt2, 0, BaseDim.MaterialThickness)
    ptN = Polar2D(ptO, 90, BaseDim.TopFrameWidth)
    ptNA = Polar2D(ptN, 90, Milling.PocketToolRadius)
    ptNB = Polar2D(ptNA, 180, Milling.ProfileToolDia + Milling.DadoClearance)
    ptNC = Polar2D(ptNB, 270, Milling.PocketToolRadius)
    ptM = Polar2D(ptN, 180, BaseDim.MaterialThickness+ Milling.RabbitClearance)
    ptO = Polar2D(ptO, 270, Milling.RabbitClearance)
    ptP = Polar2D(ptO, 180, BaseDim.MaterialThickness + Milling.RabbitClearance)
    line = Contour(0.0)
    line:AppendPoint(ptO)
    line:LineTo(ptNA)
    line:LineTo(ptNB)
    line:LineTo(ptNC)
    line:LineTo(ptM)
    line:LineTo(ptP)
    line:LineTo(ptO)
    layer:AddObject(CreateCadContour(line), true)
--  Top Frame Back Dado
    ptI = Polar2D(pt4, 270, BaseDim.ThicknessBack)
    ptI = Polar2D(ptI,  0, BaseDim.MaterialThickness)
    ptJ = Polar2D(ptI, 270, BaseDim.TopFrameWidth)
    ptJA = Polar2D(ptJ,  270, Milling.PocketToolRadius)
    ptJB = Polar2D(ptJA, 180, Milling.ProfileToolDia + Milling.DadoClearance)
    ptJC = Polar2D(ptJB,  90, Milling.PocketToolRadius)
    ptI = Polar2D(ptI, 90, Milling.RabbitClearance + BaseDim.ThicknessBack + Milling.PocketToolRadius)
    ptK = Polar2D(ptJ, 180, BaseDim.MaterialThickness + Milling.RabbitClearance)
    ptL = Polar2D(ptI, 180, BaseDim.MaterialThickness + Milling.RabbitClearance)
    line = Contour(0.0)
    line:AppendPoint(ptI)
    line:LineTo(ptJA)
    line:LineTo(ptJB)
    line:LineTo(ptJC)
    line:LineTo(ptK)
    line:LineTo(ptL)
    line:LineTo(ptI)
    layer:AddObject(CreateCadContour(line), true)
--  Toe Front Dado
    ptR = Polar2D(pt5,    90.0, BaseDim.MaterialThickness)
    ptS = Polar2D(ptR,   180.0, BaseDim.ToeKickCoverHeight)
    ptSA = Polar2D(ptS,  180.0, Milling.PocketToolRadius + BaseDim.ToeKickBottomOffsetHeight)
    ptSB = Polar2D(ptSA, 270.0, BaseDim.MaterialThickness + Milling.DadoClearance)
    ptSC = Polar2D(ptS,  270.0, BaseDim.MaterialThickness + Milling.DadoClearance)
    ptR = Polar2D(ptR,     0.0, Milling.RabbitClearance)
    ptQ = Polar2D(ptR,   270.0, BaseDim.MaterialThickness + Milling.RabbitClearance)
    ptT = Polar2D(ptS,   270.0, BaseDim.MaterialThickness + Milling.RabbitClearance)
    line = Contour(0.0)
    line:AppendPoint(ptR)
    line:LineTo(ptSA)
    line:LineTo(ptSB)
    line:LineTo(ptSC)
    line:LineTo(ptT)
    line:LineTo(ptQ)
    line:LineTo(ptR)
    layer:AddObject(CreateCadContour(line), true)
    if BaseQuestion.AddStrecherPocket then
      if BaseQuestion.DrawerRowCount >= 1 then
        local AX = Cab.Wpt2
        local DrawerRowCountX = 1
        while DrawerRowCountX <= BaseQuestion.DrawerRowCount do
          if DrawerRowCountX == 3 then
            DrawerHeight = BaseDim.FaceFrameDrawerHeight3 + BaseDim.FaceFrameMidRailWidth + (BaseDim.FaceFrameMidRailWidth * 0.5)
          end
          if DrawerRowCountX ==2 then
            DrawerHeight = BaseDim.FaceFrameDrawerHeight2 + BaseDim.FaceFrameMidRailWidth + (BaseDim.FaceFrameMidRailWidth * 0.5)
          end
          if DrawerRowCountX == 1 then
            DrawerHeight = BaseDim.FaceFrameDrawerHeight1 + BaseDim.FaceFrameTopRailWidth + (BaseDim.FaceFrameMidRailWidth * 0.5)
          end
          AX = Polar2D(AX,  0.0, DrawerHeight)
          Base_StrecherPocket(AX, 90)
          DrawerRowCountX = DrawerRowCountX+1
        end
      end
    end
    DrawWriter("Base Cabinet Left Side - ".. BaseDim.MaterialThickness .." Plywood  ( " .. GetDistance(pt2, pt3) .. " x " .. GetDistance(pt3, pt4).." )", pt1Text, 0.35000, Milling.LNPartLabels, 0.0)
    CutListfileWriterItem("300", "Base Cabinet Left Side ", "1", BaseDim.MaterialThickness, "Plywood", GetDistance(pt2, pt3), GetDistance(pt3, pt4))
  end
  if BaseQuestion.ShelfCount >= 1 then
    local ptx = Cab.Wpt1
    local anx = 0
    if side  ==  "L" then
      ptx = Polar2D(Polar2D(Cab.Wpt2, 0, BaseDim.HoleDrop), 90, BaseDim.ShelfPinHoleFront)
      anx = 90
    else
      ptx = Polar2D(Polar2D(Cab.Wpt1, 0, BaseDim.HoleDrop), 90, ( BaseDim.ThicknessBack + BaseDim.ShelfPinHoleBack))
      anx = 90
    end
    local rows = BaseDim.HoleRows
    while (rows >0) do
      Holer(ptx, anx, BaseDim.HoleSpace, Milling.ShelfPinRadius, Milling.LNSideShelfPinDrill .. "-Base")
      ptx = Polar2D(ptx, 0.0, BaseDim.ShelfHoleSpacing)
      rows = (rows - 1.0)
    end
  end
  return true
end
-- ====================================================]]
function Base_StrecherPocket(p1, Ang)
  local X1 = Cab.Wpt1
  local X2 = Cab.Wpt1
  local X3 = Cab.Wpt1
  local X4 = Cab.Wpt1
  local X5 = Cab.Wpt1
  local X6 = Cab.Wpt1
  local X7 = Cab.Wpt1
  local X8 = Cab.Wpt1
  if Ang == 270 then
    X1 = Polar2D(Polar2D(p1, 90.0, Milling.PocketToolRadius ), 180.0, ((BaseDim.StretcherThickness  + Milling.DadoClearance) * 0.5 ))
    X2 = Polar2D(X1, 270.0, BaseDim.StretcherWidth - Milling.PocketToolRadius )
    X3 = Polar2D(X2, 180.0, Milling.PocketToolRadius)
    X4 = Polar2D(X3, 270.0, Milling.PocketToolDia)
    X5 = Polar2D(X4, 0.0, BaseDim.StretcherThickness+ Milling.DadoClearance + Milling.PocketToolDia )
    X6 = Polar2D(X5, 90.0, Milling.PocketToolDia)
    X7 = Polar2D(X6, 180.0, Milling.PocketToolRadius)
    X8 = Polar2D(X1,  0.0, BaseDim.StretcherThickness  + Milling.DadoClearance)
  end
  if Ang == 90 then
    X1 = Polar2D(Polar2D(p1, 270.0, Milling.PocketToolRadius), 0.0, ((BaseDim.StretcherThickness + Milling.DadoClearance) * 0.5 ))
    X2 = Polar2D(X1, 90.0, BaseDim.StretcherWidth - Milling.PocketToolRadius )
    X3 = Polar2D(X2,  0.0, Milling.PocketToolRadius)
    X4 = Polar2D(X3, 90.0, Milling.PocketToolDia)
    X5 = Polar2D(X4, 180.0, BaseDim.StretcherThickness + Milling.DadoClearance + Milling.PocketToolDia )
    X6 = Polar2D(X5, 270.0, Milling.PocketToolDia)
    X7 = Polar2D(X6,  0.0, Milling.PocketToolRadius)
    X8 = Polar2D(X1,  180.0, BaseDim.StretcherThickness  + Milling.DadoClearance)
  end
  local layer = Milling.job.LayerManager:GetLayerWithName(Milling.LNSidePocket .. "-Base")
  local line = Contour(0.0)
  line:AppendPoint(X1)
  line:LineTo(X2)
  line:LineTo(X3)
  line:LineTo(X4)
  line:LineTo(X5)
  line:LineTo(X6)
  line:LineTo(X7)
  line:LineTo(X8)
  line:LineTo(X1)
  layer:AddObject(CreateCadContour(line), true)
  return true
end
-- ====================================================]]
function Base_CenterPanel()
  local pt1 = Polar2D(Cab.Wpt4, 0.0, BaseDim.MaterialThickness )
  local pt2 = Polar2D(pt1, 0.0, BaseDim.CenterPanelLength)
  local pt3 = Polar2D(pt2, 90.0, BaseDim.CenterPanelWidth)
  local pt4 = Polar2D(pt3, 180.0, BaseDim.CenterPanelLength)
  DrawBox(pt1, pt2, pt3, pt4, Milling.LNCenterPanelProfile .. "-Base")
  local pt1Text = Polar2D(Cab.Wpt4, 45,  1.5)
  DrawWriter("Base Cabinet Center Panel - ".. BaseDim.MaterialThickness .." Plywood  (" .. GetDistance(pt2, pt3) .. " x " .. GetDistance(pt3, pt4) ..")", pt1Text, 0.35000, Milling.LNPartLabels, 0.0)
  CutListfileWriterItem("350", "Base Cabinet Center Panel", "1", BaseDim.MaterialThickness, "Plywood", GetDistance(pt2, pt3), GetDistance(pt3, pt4))
  if BaseQuestion.ShelfCount >= 1 then
    local ptx = Polar2D(Polar2D(Cab.Wpt4, 0.0, BaseDim.HoleDrop), 90.0, BaseDim.ShelfPinHoleFront)
    local rows = BaseDim.HoleRows
    while (rows >0) do
      Holer(ptx, 90.0, BaseDim.HoleSpace, Milling.ShelfPinRadius, Milling.LNCenterPanelShelfPinDrill .. "-Base")
      ptx = Polar2D(ptx, 0.0, BaseDim.ShelfHoleSpacing)
      rows = (rows - 1.0)
    end
  end
  return true
end
-- =================== End ============================]]